{"version":3,"sources":["assets/prc.png","assets/logo.png","assets/icon.png","assets/apk/app.apk","assets/ustp.png","context/auth.js","PrivateRoute.js","Api.js","components/UI/Error/Error.js","components/Login/Login.js","context/profile.js","components/UI/Datatable/Datatable.js","components/UI/Forms/Fields/EventProfilesSelect.js","components/UI/Forms/Fields/GenderSelect.js","components/UI/Forms/Fields/DateOfBirth.js","components/UI/Forms/ProfileForm.js","components/UI/Tabs/TabContent/Profile.js","context/roomAssign.js","components/UI/Common/LinearProgressBarWithLabel.js","components/UI/Forms/Fields/RoomSelect.js","components/UI/Forms/Fields/EventRoomSelect.js","components/UI/Forms/RoomAssignmentForm.js","components/UI/Modals/NewRoomAssignment.js","components/UI/Modals/UpdateRoomAssignment.js","components/UI/Tabs/TabContent/Room.js","context/remarks.js","components/UI/Modals/NewRemarks.js","components/UI/Modals/UpdateRemarks.js","components/UI/Tabs/TabContent/Remarks.js","components/UI/Forms/AddressForm.js","components/UI/Tabs/TabContent/Address.js","components/UI/Forms/SchoolForm.js","components/UI/Tabs/TabContent/School.js","context/tests.js","components/UI/Forms/Fields/TestTypesSelect.js","components/UI/Forms/Fields/TestsStatusSelect.js","components/UI/Forms/Fields/TestReleaseDate.js","components/UI/Forms/TestsForm.js","components/UI/Modals/NewTests.js","components/UI/Modals/UpdateTests.js","components/UI/Tabs/TabContent/Tests.js","context/companions.js","components/UI/Forms/CompanionForm.js","components/UI/Modals/NewCompanions.js","components/UI/Modals/UpdateCompanions.js","components/UI/Tabs/TabContent/Companions.js","context/transportations.js","components/UI/Forms/TransportationForm.js","components/UI/Modals/NewTransportations.js","components/UI/Modals/UpdateTransportations.js","components/UI/Tabs/TabContent/Transportations.js","context/quarantine.js","components/UI/Forms/Fields/StartQuarantineDate.js","components/UI/Forms/Fields/EndQuarantineDate.js","components/UI/Forms/QuarantineForm.js","components/UI/Modals/NewQuarantine.js","components/UI/Modals/UpdateQuarantine.js","components/UI/Tabs/TabContent/Quarantine.js","context/medicalCondition.js","components/UI/Forms/MedicalConditionForm.js","components/UI/Modals/NewMedicalCondition.js","components/UI/Modals/UpdateMedicalCondition.js","components/UI/Tabs/TabContent/MedicalCondition.js","components/UI/Tabs/ProfileTabs.js","components/UI/Modals/ProfileRecords.js","components/UI/Modals/SendInformation.js","components/UI/Modals/QRCodeModal.js","components/UI/Forms/Fields/RoleSelect.js","components/Dashboard/Main/Main.js","components/Dashboard/Footer/Footer.js","components/UI/Modals/ChangePassword.js","context/event.js","components/UI/Forms/Fields/StartDate.js","components/UI/Forms/Fields/EndDate.js","components/UI/Forms/EventForm.js","components/UI/Modals/NewEvent.js","components/UI/Modals/UpdateEvent.js","components/Dashboard/Events/Events.js","context/room.js","components/UI/Forms/RoomForm.js","components/UI/Modals/NewRoom.js","components/UI/Modals/UpdateRoom.js","components/Dashboard/Rooms/Rooms.js","components/Dashboard/Dashboard.js","components/UI/Error/Error404.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","AuthContext","createContext","useAuth","useContext","PrivateRoute","Component","component","rest","authData","render","props","authTokens","expires_in","Date","now","isAuthenticated","to","Axios","create","baseURL","Error","className","this","children","Login","useState","isProcessing","setProcessing","isError","setIsError","errorMessage","setErrorMessage","setAuthTokens","isShowPass","setIsShowPass","credentialsInputHandler","v","Container","style","width","marginTop","opacity","Paper","elevation","padding","borderRadius","border","Row","Col","xs","backgroundColor","src","PRC","height","alt","href","rel","target","textDecoration","Card","Logo","Form","onSubmit","e","preventDefault","username","document","querySelector","value","password","API","post","then","result","status","data","error","message","catch","loginHandler","TextField","onChange","name","placeholder","label","fullWidth","required","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","Button","variant","color","disabled","Spinner","icon","faSignInAlt","ProfileContext","useProfile","DataTable","isLoading","CircularProgress","marginLeft","zIndex","md","title","columns","options","EventProfilesSelect","token","event","setEvent","eventOptions","setEventOptions","getEvents","get","headers","access_token","eventsList","eventList","map","id","formatData","useEffect","select","eventChangeHandler","startAdornment","faCalendarDay","option","MenuItem","key","GenderSelect","selectedGender","selectedProfile","profile","gender","setGender","DateOfBirth","selectedDob","dob","setDob","utils","DateFnsUtils","date","changeHandler","format","clearable","hideTabs","ProfileForm","first_name","firstName","setFirstName","middle_name","middleName","setMiddleName","last_name","lastName","setLastName","email","setEmail","mobile","setMobile","fluid","Profile","RoomAssignContext","useRoomAssign","LinearProgressBar","Box","display","alignItems","mr","LinearProgress","minWidth","Typography","Math","round","useStyles","makeStyles","root","LinearProgressBarWithLabel","classes","progress","setProgress","timer","setInterval","prevProgress","floor","random","clearInterval","RoomSelect","roomId","room","setRoom","roomOptions","setRoomOptions","roomsList","toString","EventRoomSelect","eventId","RoomAssignmentForm","selectedRoomAssignment","setEventId","setRoomId","seatNumber","setSeatNumber","event_id","room_id","seat","NewRoomAssignment","setIsProcessing","Provider","Modal","backdrop","isOpen","toggle","modalMargin","eventID","roomID","profile_id","Swal","fire","loadAssignedRooms","saveDataHandler","ModalHeader","faDoorOpen","faInfoCircle","ModalBody","faUser","toUpperCase","ModalFooter","faSave","faWindowClose","UpdateRoomAssignment","put","console","log","Rooms","rooms","setRooms","setSelectedRoomAssignment","isShowNewRoomAssignmentModal","setIsShowNewRoomAssignmentModal","toggleIsShowNewRoomAssignmentModal","isShowUpdateRoomAssignmentModal","setIsShowUpdateRoomAssignmentModal","toggleIsShowUpdateRoomAssignmentModal","useCallback","length","r","address","size","faPlus","ListGroup","overflow","overflowX","maxHeight","rm","index","ListGroupItem","Tooltip","placement","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed","delete","faArchive","faEdit","RemarksContext","NewRemarks","faCommentDots","multiline","rows","remarks","loadRemarks","UpdateRemarks","selectedRemarks","setRemarks","Remarks","setSelectedRemarks","isShowRemarksModal","setIsShowRemarksModal","toggleIsShowRemarksModal","isShowUpdateRemarksModal","setIsShowUpdateRemarksModal","toggleIsShowUpdateRemarksModal","AddressForm","specific_address","specificAddress","setSpecificAddress","barangay","setBarangay","zipcode","setZipcode","Address","SchoolForm","school","schoolName","setSchoolName","School","TestsContext","useTests","TestTypesSelect","selectedTests","testType","setTestType","TestsStatusSelect","testStatus","setTestStatus","TestReleaseDate","testRelease","setTestRelease","TestsForm","testsLocation","setTestLocation","NewTests","dateFns","faSyringe","test_id","tests","loadTests","UpdateTests","Tests","setTests","setSelectedTests","isShowNewTestsModal","setIsShowNewTestsModal","toggleIsShowNewTestsModal","isShowUpdateTestsModal","setIsShowUpdateTestsModal","toggleIsShowUpdateTestsModal","test_type","test_type_id","location","released","tst","confirmtButtonColor","confirmtButtonText","CompanionsContext","useCompanions","CompanionForm","selectedCompanions","companionName","setCompanionName","contact","setContact","relationship","setRelationship","setAddress","NewCompanions","loadCompanions","UpdateCompanions","faUsers","Companions","companions","setCompanions","setSelectedCompanions","isShowCompanionsModal","setIsShowCompanionsModal","toggleIsShowCompanionsModal","isShowUpdateCompanionsModal","setIsShowUpdateCompanionsModal","toggleIsShowUpdateCompanionsModal","cmp","TransportationsContext","useTransportations","TransportationForm","selectedTransportations","vehicle","setVehicle","plateNumber","setPlateNumber","driver","setDriver","NewTransportations","faCar","loadTransportations","UpdateTransportations","Transportations","transportations","setTransportations","setSelectedTransportations","isShowTransportationsModal","setIsShowTransportationsModal","toggleIsShowTransportationsModal","isShowUpdateTransportationsModal","setIsShowUpdateTransportationsModal","toggleIsShowUpdateTransportationsModal","transportation","plate_no","trans","QuarantineContext","useQuarantine","StartQuarantineDate","selectedQuarantine","startQurantineDate","setStartQuarantineDate","startDateChangeHandler","showTodayButton","EndQuarantineDate","endQuarantineDate","setEndQuarantineDate","isStartSelected","minDate","QuarantineForm","monitoring","setMonitoring","setIsStartSelected","setMinDate","addDays","NewQuarantine","faHouseUser","startDate","endDate","loadQuarantine","UpdateQuarantine","Quarantine","quarantine","setQuarantine","setSelectedQuarantine","isShowQuarantineModal","setIsShowQuarantineModal","toggleIsShowQuarantineModal","isShowUpdateQuarantineModal","setIsShowUpdateQuarantineModal","toggleIsShowUpdateQuarantineModal","start","end","quar","MedicalConditionContext","useMedicalCondition","MedicalConditionForm","selectedMedicalCondition","medicalConditions","setMedicalConditions","NewMedicalCondition","faBookMedical","loadMedicalCondition","UpdateMedicalCondition","MedicalCondition","medicalCondition","setMedicalCondition","setSelectedMedicalCondition","isShowMedicalConditionModal","setIsShowMedicalConditionModal","toggleIsShowMedicalConditionModal","isShowUpdateMedicalConditionModal","setIsShowUpdateMedicalConditionModal","toggleIsShowUpdateMedicalConditionModal","JSON","parse","medical_conditions","conditions","med","TabPanel","other","role","hidden","aria-labelledby","p","theme","tabsHeader","float","tabPanel","minHeight","paddingTop","ProfileTabs","setValue","Tabs","newValue","setActiveTab","scrollButtons","indicatorColor","textColor","Tab","faMapMarkedAlt","faSchool","Room","UpdateProfile","processTitle","setProcessTitle","activeTab","saveProfile","saveAddress","addressData","address_id","saveSchool","schoolData","updateDataHandler","faUserEdit","SendInformation","faEnvelope","faMobileAlt","faKey","faSms","faQrcode","QRCodeModal","useRef","dataToEmbed","setDataToEmbed","isToDisplay","setIsToDisplay","dataFormat","created_at","setTimeout","generateQR","offset","level","includeMargin","renderAs","listStyle","lineHeight","fontSize","borderBottom","USTP","HTML2Canvas","getElementById","canvas","pngUrl","toDataURL","replace","downloadLink","createElement","download","body","appendChild","click","removeChild","faDownload","RolesSelect","roles","setRoles","roleChangeHandler","rolesList","Main","setRoleId","setRolesList","profileData","setProfileData","setSelectedProfile","setIsLoading","isShowProfileRecordsModal","setIsShowProfileRecordsModal","toggleIsShowProfileRecordsModal","isShowSendInfoModal","setIsShowSendInfoModal","toggleIsShowSendInfoModal","isShowQRModal","setIsShowQRModal","toggleIsShowQRModal","getRoles","formatRolesData","loadProfiles","evID","profiles","loadProfilesWithRoles","zipcodes","city","province","customBodyRender","tableMeta","updateValue","rowIndex","updateParticipantHandler","sendInformationHandler","faPaperPlane","remarksHandler","assignRoomHandler","generateQRHandler","filterType","tableBodyHeight","responsive","selectableRows","print","textLabels","noMatch","ProfileRecords","Footer","year","bottom","left","ChangePasswordModal","authToken","isShowNewPass","setIsShowNewPass","isShowConfirmPass","setIsShowConfirmPass","isShowOldPass","setIsShowOldPass","isConfirmError","setIsConfirmError","isMinimum","setIsMinimum","newPassword","setNewPassword","oldPassword","setOldPassword","newPassData","changePasswordHandler","CardBody","EventContext","useEvent","StartDate","selectedEvent","setStartDate","disablePast","EndDate","setEndDate","EventForm","eventName","setEventName","setLocation","NewEvent","loadEvents","faCalendarPlus","UpdateProfileForm","Events","setSelectedEvent","eventData","setEventData","isShowNewEventModal","setIsShowNewEventModal","toggleIsShowNewEventModal","isShowUpdateEventModal","setIsShowUpdateEventModal","toggleIsShowUpdateEventModal","fixHeader","UpdateEvent","RoomContext","useRoom","RoomForm","selectedRoom","roomName","setRoomName","capacity","setCapacity","NewRoom","loadRooms","roomData","setRoomData","setSelectedRoom","isShowNewRoomModal","setIsShowNewRoomModal","toggleIsShowNewRoomModal","isShowUpdateRoomModal","setIsShowUpdateRoomModal","toggleIsShowUpdateRoomModal","UpdateRoom","appBar","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","margin","content","flexGrow","contentShift","large","nested","paddingLeft","Dashboard","drawerStatus","setDrawerStatus","isManageCollapse","setIsManageCollapse","isGenerateCollapse","setIsGenerateCollapse","setModalMargin","changePasswordModal","setVisiblechangePasswordModal","toggleChangePasswordModal","handleNavigation","stringPath","history","push","AppBar","clsx","Toolbar","aria-label","edge","outline","noWrap","Icon","Drawer","anchor","open","paper","user","List","flexDirection","ListItem","button","ListItemIcon","ListItemText","primary","APK","faCog","Collapse","in","timeout","unmountOnExit","disablePadding","faFileAlt","sessionStorage","removeItem","window","reload","exact","path","ChangePassword","Error404","App","existingTokens","getItem","setItem","stringify","basename","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c80022b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/prc.a6cbd833.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.0dad67f1.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.a06f7403.png\";","module.exports = __webpack_public_path__ + \"static/media/app.d0ff5c3a.apk\";","module.exports = __webpack_public_path__ + \"static/media/ustp.58b23abf.png\";","import { createContext, useContext } from 'react' \r\n\r\nexport const AuthContext = createContext() \r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext) \r\n}","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useAuth } from \"./context/auth\";\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n    const authData = useAuth();\r\n    \r\n    const isAuthenticated = (authData) =>{\r\n        if(authData.authTokens === null){\r\n            return false;\r\n        }\r\n\r\n        if (authData.authTokens.expires_in > Date.now()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        <Route {...rest} render= { \r\n            (props) => isAuthenticated(authData) ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/login\" />\r\n            )\r\n        }\r\n        />\r\n    );\r\n}\r\n\r\nexport default PrivateRoute;","import Axios from 'axios';\r\n\r\nexport default Axios.create({\r\n    // baseURL: \"https://passengertracer.net/apis/api/v1/\"\r\n//    baseURL: \"http://202.137.117.172/covid19tracker-api/public/api/v1\"\r\n    // baseURL: \"http://10.10.10.16/covid19tracker-api/public/api/v1\"\r\n    baseURL : \"http://tracer.ustp.edu.ph/apis/api/v1\",\r\n    // baseURL: \"http://tracer.test/api/v1/\"\r\n})","import React, { Component } from 'react'\r\n\r\nexport default class Error extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <span className=\"text-danger text-center p-1\">{this.props.children}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Redirect } from \"react-router-dom\"\r\nimport API from '../../Api'\r\nimport { useAuth } from \"../../context/auth\"\r\n\r\nimport Error from '../UI/Error/Error'\r\n\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    Form,\r\n    Spinner\r\n} from 'reactstrap'\r\nimport { TextField, Button, Paper, InputAdornment, IconButton  } from '@material-ui/core'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSignInAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport Visibility from '@material-ui/icons/Visibility'\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\r\n\r\nimport PRC from '../../assets/prc.png'\r\nimport Logo from '../../assets/logo.png'\r\n\r\nconst Login = (props) => {\r\n\r\n    const [isProcessing, setProcessing] = useState(false)\r\n    const [isError, setIsError] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState('Oops! sorry something went wrong...')\r\n    const { authTokens, setAuthTokens } = useAuth()\r\n\r\n    const [isShowPass, setIsShowPass] = useState(false)\r\n    const toggleShowPassword = () => setIsShowPass(!isShowPass)\r\n\r\n    const isAuthenticatedHandler = () => {\r\n        const token = authTokens\r\n\r\n        if (token === null) {\r\n            return false\r\n        } else {\r\n            if (token.expires_in < Date.now()) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    if (isAuthenticatedHandler()) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n\r\n    const loginHandler = (e) => {\r\n        e.preventDefault()\r\n        const username = document.querySelector(\"input[name=username]\").value\r\n        const password = document.querySelector(\"input[name=password]\").value\r\n\r\n        if (username !== \"\" && password !== \"\") {\r\n            setProcessing(true)\r\n            API.post(\"auth/carrier/login\", {\r\n                username,\r\n                password\r\n            }).then(result => {\r\n                setProcessing(false)\r\n                if (result.status === 200) {\r\n                    if (result.data.status === false) {\r\n                        setErrorMessage(result.data.error)\r\n                        setIsError(true)\r\n                    } else {\r\n                        setAuthTokens(result.data)\r\n                    }\r\n                } else if (result.status === 254) {\r\n                    setErrorMessage(result.data.message)\r\n                    setIsError(true)\r\n                } else {\r\n                    setIsError(true)\r\n                }\r\n            }).catch(e => {\r\n                setProcessing(false)\r\n                setIsError(true)\r\n            })\r\n        } else {\r\n            setErrorMessage(\"Please enter a username and password\")\r\n            setIsError(true)\r\n        }\r\n    }\r\n\r\n    const credentialsInputHandler = (v) => {\r\n        if (v === \"\") {\r\n            setIsError(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"loginBg\">\r\n            <Container className=\"p-4\" style={{ width: '900px', marginTop: '5%', opacity: \"0.95\" }}>\r\n                <Paper elevation={5} className=\"p-0 m-0\" style={{ padding: \"10px\", borderRadius: \"0px\", border: \"none\" }}>\r\n                    <Row className=\"p-0 m-0\">\r\n                        <Col xs={6} className=\"text-center text-white p-4 m-0\" style={{ backgroundColor: \"#1a1751\" }}>\r\n                            <img className=\"mt-4\" src={PRC} width=\"150\" height=\"150\" alt=\"USTP Logo\" />\r\n                            <a href=\"https://www.prc.gov.ph/\" rel=\"noopener noreferrer\" target=\"_blanks\" className=\"text-white ml-1 mr-1\" style={{ textDecoration: \"none\" }}>\r\n                                <h3 className=\"mt-4\">\r\n                                    Professional Regulation Commission\r\n                                </h3>\r\n                            </a>\r\n                        </Col>\r\n                        <Col xs={6} className=\"p-4 m-0 mt-2\">\r\n                            <Card className=\"p-0 m-0\" style={{ borderRadius: \"0px\", border: \"none\" }}>\r\n                                <Col xs={12} className=\"mt-4 text-center\">\r\n                                    <img className=\"mt-4\" src={Logo} width=\"350\" height=\"100\" alt=\"EMS Logo\" />\r\n                                    <h6>Event Monitoring System</h6>\r\n                                </Col>\r\n                                <Col xs={12}>\r\n                                    <Form onSubmit={(e) => loginHandler(e)}>\r\n                                        <Col xs={12} className=\"pl-4 pr-4 mb-2 text-center\">\r\n                                            {isError && <Error>{errorMessage}</Error>}\r\n                                        </Col>\r\n                                        <Col xs={12} className=\"pl-4 pr-4 mb-2\">\r\n                                            <TextField onChange={(v) => credentialsInputHandler(v.target.value)} name=\"username\" placeholder=\"Username\" label=\"Username\" fullWidth required />\r\n                                        </Col>\r\n                                        <Col xs={12} className=\"pl-4 pr-4 mb-2\">\r\n                                            <TextField onChange={(v) => credentialsInputHandler(v.target.value)} type={isShowPass ? \"text\" : \"password\"} name=\"password\" placeholder=\"Password\" label=\"Password\" InputProps={{\r\n                                                endAdornment: <InputAdornment position=\"end\">\r\n                                                    <IconButton onClick={toggleShowPassword}>\r\n                                                        {isShowPass ? <Visibility /> : <VisibilityOff />}\r\n                                                    </IconButton>\r\n                                                </InputAdornment>\r\n                                            }} fullWidth required />\r\n                                        </Col>\r\n                                        <Col xs={12} className=\"pl-4 pr-4 mt-3 mb-4\">\r\n                                            <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"pt-1\" disabled={isProcessing} fullWidth>\r\n                                                {isProcessing ? <div className=\"text-center mt-1\"><Spinner style={{ width: '1.5rem', height: '1.5rem' }} color=\"light\" /></div> : <div className=\"pt-1\"><span>LOGIN</span><FontAwesomeIcon className=\"pl-1\" icon={faSignInAlt} /></div>}\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Form>\r\n                                </Col>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Paper>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login ","import { createContext, useContext } from 'react' \r\n\r\nexport const ProfileContext = createContext() \r\n\r\nexport function useProfile() {\r\n  return useContext(ProfileContext) \r\n}","import React from 'react'\r\nimport { Col, Row } from 'reactstrap'\r\nimport MUIDataTable from \"mui-datatables\"\r\nimport { CircularProgress } from '@material-ui/core'\r\n\r\nconst DataTable = (props) => {\r\n    return (\r\n        <div className=\"col-md-12 mt-2 pb-0 pr-0 m-0\">\r\n            {props.isLoading && <CircularProgress style={{ marginLeft: '48%', marginTop: '18%', position: \"absolute\", zIndex: '1000', }} />}\r\n            <Row>\r\n                <Col md={12} className=\"mr-0 pr-0\">\r\n                    <MUIDataTable\r\n                        title={props.title}\r\n                        data={props.data}\r\n                        columns={props.columns}\r\n                        options={props.options}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default DataTable\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useAuth } from '../../../../context/auth'\r\nimport API from '../../../../Api'\r\n\r\nimport { TextField, MenuItem, InputAdornment } from '@material-ui/core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCalendarDay } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst EventProfilesSelect = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const [event, setEvent] = useState(\"\")\r\n    const [eventOptions, setEventOptions] = useState([])\r\n\r\n    const formatData = (result) => {\r\n        if (result.data !== null) {\r\n            let eventList = result.data.map((event) => {\r\n                return {\r\n                    value: event.id,\r\n                    label: event.name\r\n                }\r\n            })\r\n\r\n            return [{value: ' ', label: ' '}, ...eventList]\r\n        }\r\n    }\r\n\r\n    const getEvents = () => {\r\n        API.get('events', {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            let eventsList = formatData(result)\r\n            setEventOptions(eventsList)\r\n        })\r\n    }\r\n\r\n    const handleChange = (value) => {\r\n        setEvent(value)\r\n        props.eventChangeHandler(value)\r\n    }\r\n\r\n    useEffect(() => {        \r\n        getEvents()\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                select\r\n                name=\"eventId\"\r\n                value={event}\r\n                onChange={(e) => handleChange(e.target.value)}\r\n                fullWidth\r\n                required\r\n                InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <FontAwesomeIcon icon={faCalendarDay} className=\"mr-1\" /> <b>Events:</b>\r\n                        </InputAdornment>\r\n                    )\r\n                }}\r\n            >\r\n                {eventOptions.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                    </MenuItem>\r\n                ))}\r\n            </TextField>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EventProfilesSelect ","import React, { useState } from 'react' \r\nimport { useProfile } from '../../../../context/profile'\r\nimport TextField from '@material-ui/core/TextField' \r\nimport MenuItem from '@material-ui/core/MenuItem' \r\n\r\nconst GenderSelect = (props) => {\r\n    const selectedGender = useProfile().selectedProfile.profile.gender\r\n    const [gender, setGender] = useState(selectedGender || '') \r\n\r\n    const genderOptions = [\r\n        {\r\n            value: \"M\",\r\n            label: \"Male\"\r\n        },\r\n        {\r\n            value: \"F\",\r\n            label: \"Female\"\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                select\r\n                label=\"Select Gender\"\r\n                name=\"gender\"\r\n                value={gender}\r\n                onChange={(e) => setGender(e.target.value)}\r\n                fullWidth\r\n                required\r\n            >\r\n                {genderOptions.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                    </MenuItem>\r\n                ))}\r\n            </TextField>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GenderSelect ","import React, {useState} from 'react' \r\nimport { useProfile } from '../../../../context/profile'\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers' \r\nimport DateFnsUtils from '@date-io/date-fns' \r\n\r\nconst DateOfBirth = (props) => {\r\n    const selectedDob = useProfile().selectedProfile.profile.dob\r\n    const [dob, setDob] = useState(selectedDob || null)\r\n\r\n    const changeHandler = (value) => {\r\n        setDob(value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                    label=\"Date of Birth\"\r\n                    name=\"dob\"\r\n                    value={dob}\r\n                    onChange={(date, value) => changeHandler(value)}\r\n                    format=\"MMM/d/yyyy\"\r\n                    required\r\n                    clearable\r\n                    hideTabs\r\n                    fullWidth\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DateOfBirth ","import React, { useState, useEffect, Suspense } from 'react'\r\nimport { useAuth } from '../../../context/auth'\r\nimport { useProfile } from '../../../context/profile'\r\nimport { Paper, TextField } from '@material-ui/core'\r\nimport { Container, Row, Col } from 'reactstrap'\r\n\r\nimport GenderSelect from '../Forms/Fields/GenderSelect'\r\nimport DateOfBirth from '../Forms/Fields/DateOfBirth'\r\n\r\n\r\nconst ProfileForm = (props) => {\r\n\r\n    const selectedProfile = useProfile().selectedProfile || {}\r\n    const [firstName, setFirstName] = useState(selectedProfile.profile.first_name || \"\")\r\n    const [middleName, setMiddleName] = useState(selectedProfile.profile.middle_name || \"\")\r\n    const [lastName, setLastName] = useState(selectedProfile.profile.last_name || \"\")\r\n    const [email, setEmail] = useState(selectedProfile.profile.email || \"\")\r\n    const [mobile, setMobile] = useState(selectedProfile.profile.mobile || \"\")\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Paper className=\"p-3 mt-3\">\r\n                <Row className=\"m-0 p-0 mt-2 pl-2 pr-2\">\r\n                    {/* <Col md={2}></Col> */}\r\n                    <Col md={12}>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <TextField\r\n                                    value={firstName}\r\n                                    onChange={(e) => setFirstName(e.target.value)}\r\n                                    name=\"first_name\"\r\n                                    label=\"First Name\"\r\n                                    fullWidth\r\n                                    required\r\n                                />\r\n                                <TextField\r\n                                    value={middleName}\r\n                                    onChange={(e) => setMiddleName(e.target.value)}\r\n                                    name=\"middle_name\"\r\n                                    label=\"Middle Name\"\r\n                                    fullWidth\r\n                                />\r\n                                <TextField\r\n                                    value={lastName}\r\n                                    onChange={(e) => setLastName(e.target.value)}\r\n                                    name=\"last_name\"\r\n                                    label=\"Last Name\"\r\n                                    fullWidth\r\n                                    required\r\n                                />\r\n                                <GenderSelect />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <DateOfBirth />\r\n                                <TextField\r\n                                    value={email}\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                    name=\"email\"\r\n                                    label=\"Email\"\r\n                                    fullWidth\r\n                                    required\r\n                                />\r\n                                <TextField\r\n                                    value={mobile}\r\n                                    onChange={(e) => setMobile(e.target.value)}\r\n                                    name=\"mobile\"\r\n                                    label=\"Contact number\"\r\n                                    fullWidth\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </Paper>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileForm\r\n","import React from 'react'\r\nimport ProfileForm from '../../Forms/ProfileForm'\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileForm />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile ","import { createContext, useContext } from 'react' \r\n\r\nexport const RoomAssignContext = createContext() \r\n\r\nexport function useRoomAssign() {\r\n  return useContext(RoomAssignContext) \r\n}","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\nimport Box from '@material-ui/core/Box'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nfunction LinearProgressBar(props) {\r\n    return (\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n            <Box width=\"100%\" mr={1}>\r\n                <LinearProgress variant=\"determinate\" {...props} />\r\n            </Box>\r\n            <Box minWidth={35}>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\r\n                    props.value,\r\n                )}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n})\r\n\r\nLinearProgressBar.propTypes = {\r\n    /**\r\n     * The value of the progress indicator for the determinate and buffer variants.\r\n     * Value between 0 and 100.\r\n     */\r\n    value: PropTypes.number.isRequired,\r\n}\r\n\r\n\r\nconst LinearProgressBarWithLabel = (props) => {\r\n    const classes = useStyles()\r\n    const [progress, setProgress] = useState(0)\r\n\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n\r\n            setProgress((prevProgress) => ((prevProgress < 89 && prevProgress < 100) ?  prevProgress + Math.floor(Math.random() * 10) + 1 : 99))\r\n\r\n\r\n        }, 800)\r\n        return () => {\r\n            clearInterval(timer)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography>{props.title}</Typography>\r\n            <LinearProgressBar value={progress} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LinearProgressBarWithLabel\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useAuth } from '../../../../context/auth'\r\nimport API from '../../../../Api'\r\n\r\nimport { TextField, MenuItem } from '@material-ui/core'\r\n\r\nconst RoomSelect = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const [room, setRoom] = useState(props.roomId || \"\")\r\n    const [roomOptions, setRoomOptions] = useState([])\r\n\r\n    const formatData = (result) => {\r\n        if (result.data !== null) {\r\n            return result.data.map((room) => {\r\n                return {\r\n                    value: room.id.toString(),\r\n                    label: room.name\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const getRooms = () => {\r\n        API.get('rooms', {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            let roomsList = formatData(result)\r\n            setRoomOptions(roomsList)\r\n        })\r\n    }\r\n\r\n    const handleChange = (value) => {\r\n        setRoom(value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRooms()\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                select\r\n                label=\"Select a room\"\r\n                name=\"roomId\"\r\n                value={room}\r\n                onChange={(e) => handleChange(e.target.value)}\r\n                fullWidth\r\n                required\r\n            >\r\n                {roomOptions.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                    </MenuItem>\r\n                ))}\r\n            </TextField>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RoomSelect ","import React, { useState, useEffect } from 'react'\r\nimport { useAuth } from '../../../../context/auth'\r\nimport API from '../../../../Api'\r\n\r\nimport { TextField, MenuItem } from '@material-ui/core'\r\n\r\nconst EventRoomSelect = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const [event, setEvent] = useState(props.eventId || \"\")\r\n    const [eventOptions, setEventOptions] = useState([])\r\n\r\n    const formatData = (result) => {\r\n        if (result.data !== null) {\r\n            return result.data.map((event) => {\r\n                return {\r\n                    value: event.id,\r\n                    label: event.name\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const getEvents = () => {\r\n        API.get('events', {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            let eventsList = formatData(result)\r\n            setEventOptions(eventsList)\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getEvents()\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                select\r\n                label=\"Select an event\"\r\n                name=\"eventId\"\r\n                value={event}\r\n                onChange={(e) => setEvent(e.target.value)}\r\n                fullWidth\r\n                required\r\n            >\r\n                {eventOptions.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                    </MenuItem>\r\n                ))}\r\n            </TextField>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EventRoomSelect ","import React, { useState, useEffect } from 'react'\r\nimport { useRoomAssign } from '../../../context/roomAssign'\r\n\r\nimport { TextField } from \"@material-ui/core\"\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport RoomSelect from '../Forms/Fields/RoomSelect'\r\nimport EventRoomSelect from '../Forms/Fields/EventRoomSelect'\r\n\r\nconst RoomAssignmentForm = (props) => {\r\n\r\n    const selectedRoomAssignment = useRoomAssign().selectedRoomAssignment \r\n\r\n    const [eventId, setEventId] = useState(\"\")\r\n    const [roomId, setRoomId] = useState(\"\")\r\n    const [seatNumber, setSeatNumber] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        if(selectedRoomAssignment !== null){\r\n            setEventId(selectedRoomAssignment.event_id)\r\n            setRoomId(selectedRoomAssignment.room_id)\r\n            setSeatNumber(selectedRoomAssignment.seat)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col md={6}>\r\n                    <EventRoomSelect eventId={selectedRoomAssignment.event_id || \"\"} />\r\n                </Col>\r\n                <Col md={6}>\r\n                    <RoomSelect roomId={selectedRoomAssignment.room_id || \"\"} />\r\n                </Col>\r\n                <Col md={6}>\r\n                    <TextField\r\n                        value={seatNumber || \"\"}\r\n                        onChange={(e) => setSeatNumber(e.target.value)}\r\n                        name=\"seatNumber\"\r\n                        label=\"Seat Number\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default RoomAssignmentForm\r\n","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport API from '../../../Api'\r\nimport { useAuth } from '../../../context/auth'\r\nimport { useProfile } from '../../../context/profile'\r\nimport { RoomAssignContext } from '../../../context/roomAssign'\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faDoorOpen, faInfoCircle, faUser } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\nimport RoomAssignmentForm from '../Forms/RoomAssignmentForm'\r\n\r\nconst NewRoomAssignment = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const [selectedRoomAssignment, setSelectedRoomAssignment] = useState({})\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveDataHandler = (e) => {\r\n        e.preventDefault()\r\n        setIsProcessing(true)\r\n\r\n        let eventID = document.querySelector('input[name=eventId]').value\r\n        let roomID = document.querySelector('input[name=roomId]').value\r\n        let seat = document.querySelector('input[name=seatNumber]').value\r\n        let data = {\r\n            'event_id': eventID,\r\n            'room_id': roomID,\r\n            'profile_id': selectedProfile.profile_id,\r\n            'seat': seat\r\n        }\r\n\r\n        API.post('assignment/store', data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                API.post('assignment/room', {\r\n                    'event_id': eventID,\r\n                    'profile_id': [selectedProfile.profile_id],\r\n                }, {\r\n                    headers: {\r\n                        'Authorization': 'bearer ' + token.access_token\r\n                    }\r\n                }).then(result => {\r\n                    setIsProcessing(false)\r\n                    Swal.fire(\r\n                        'Transaction Completed!',\r\n                        result.data.message,\r\n                        'success'\r\n                    )\r\n                    props.loadAssignedRooms()\r\n                    props.toggle()\r\n                }).catch(e => {\r\n                    setIsProcessing(false)\r\n                    Swal.fire(\r\n                        'Transaction Failed!',\r\n                        'Technical Error',\r\n                        'error'\r\n                    )\r\n                    if (props.loadAssignedRooms) {\r\n                        props.loadAssignedRooms()\r\n                    }\r\n\r\n                    props.toggle()\r\n                })\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <RoomAssignContext.Provider value={{ selectedRoomAssignment }}>\r\n            <div>\r\n                <Modal backdrop={'static'} isOpen={props.isOpen} toggle={props.toggle} className='modal-lg' style={{ marginLeft: props.modalMargin, marginTop: '5%' }}>\r\n                    <form onSubmit={(e) => saveDataHandler(e)}>\r\n                        <ModalHeader>\r\n                            <FontAwesomeIcon icon={faDoorOpen} className='mr-1' />\r\n                            Assign a room <br />\r\n                            <small className='text-danger'>\r\n                                <FontAwesomeIcon icon={faInfoCircle} className='mr-1' />\r\n                            Note: Fields with * is a required field\r\n                        </small>\r\n                        </ModalHeader>\r\n                        <ModalBody className=\"mt-0 pt-0\">\r\n                            <Row className=\"p-2 pt-0\">\r\n                                <Col md={12}>\r\n                                    <Row className=\"m-0 p-0\">\r\n                                        <Col md={12} className=\"m-0 p-0\">\r\n                                            <Row className=\"m-0 p-0\">\r\n                                                <Col md={12} className=\"text-left m-0 p-0 ml-3\">\r\n                                                    <span>\r\n                                                        <b><FontAwesomeIcon icon={faUser} className=\"mr-1\" />Participant:</b>\r\n                                                        {` ${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                                    </span>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row className=\"mt-1\">\r\n                                                <Col md={12}>\r\n                                                    <RoomAssignmentForm />\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                                {isProcessing &&\r\n                                    <Col md={12}>\r\n                                        <Paper className='p-2 m-2 mt-3'>\r\n                                            <LinearProgressBarWithLabel title='Assigning a room' />\r\n                                        </Paper>\r\n                                    </Col>\r\n                                }\r\n                            </Row>                            \r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type='submit' className='mr-1' color='primary' disabled={isProcessing} style={{ minWidth: '120px' }}>\r\n                                <FontAwesomeIcon icon={faSave} /> Save\r\n                        </Button>\r\n                            <Button color='danger' onClick={props.toggle} disabled={isProcessing} style={{ minWidth: '120px' }}>\r\n                                <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                        </Button>\r\n                        </ModalFooter>\r\n                    </form>\r\n                </Modal>\r\n            </div>\r\n        </RoomAssignContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NewRoomAssignment ","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport API from '../../../Api'\r\nimport { useAuth } from '../../../context/auth'\r\nimport { useProfile } from '../../../context/profile'\r\nimport { useRoomAssign } from '../../../context/roomAssign'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faDoorOpen, faInfoCircle, faUser } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\nimport RoomAssignmentForm from '../Forms/RoomAssignmentForm'\r\n\r\nconst UpdateRoomAssignment = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const selectedRoomAssignment = useRoomAssign().selectedRoomAssignment\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveDataHandler = (e) => {\r\n        e.preventDefault()\r\n        setIsProcessing(true)\r\n\r\n        let eventID = document.querySelector('input[name=eventId]').value\r\n        let roomID = document.querySelector('input[name=roomId]').value\r\n        let seat = document.querySelector('input[name=seatNumber]').value\r\n\r\n        let data = {\r\n            'event_id': eventID,\r\n            'room_id': roomID,\r\n            'profile_id': selectedProfile.profile_id,\r\n            'seat': seat\r\n        }\r\n\r\n        API.put(`assignment/update/${selectedRoomAssignment.id}`, data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                API.post('assignment/room', {\r\n                    'event_id': eventID,\r\n                    'profile_id': [selectedProfile.profile_id],\r\n                }, {\r\n                    headers: {\r\n                        'Authorization': 'bearer ' + token.access_token\r\n                    }\r\n                }).then(result => {\r\n                    setIsProcessing(false)\r\n                    Swal.fire(\r\n                        'Transaction Completed!',\r\n                        result.data.message,\r\n                        'success'\r\n                    )\r\n                    props.loadAssignedRooms()\r\n                    props.toggle()\r\n                }).catch(e => {\r\n                    setIsProcessing(false)\r\n                    Swal.fire(\r\n                        'Transaction Failed!',\r\n                        'Technical Error',\r\n                        'error'\r\n                    )\r\n\r\n                    if (props.loadAssignedRooms) {\r\n                        props.loadAssignedRooms()\r\n                    }\r\n\r\n                    props.toggle()\r\n                })\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            console.log(e)\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={'static'} isOpen={props.isOpen} toggle={props.toggle} className='modal-lg' style={{ marginLeft: props.modalMargin, marginTop: '5%' }}>\r\n                <form onSubmit={(e) => saveDataHandler(e)}>\r\n                    <ModalHeader>\r\n                        <FontAwesomeIcon icon={faDoorOpen} className='mr-1' />\r\n                        Update Room Assignment <br />\r\n                        <small className='text-danger'>\r\n                            <FontAwesomeIcon icon={faInfoCircle} className='mr-1' />\r\n                            Note: Fields with * is a required field\r\n                        </small>\r\n                    </ModalHeader>\r\n                    <ModalBody className=\"mt-0 pt-0\">\r\n                        <Row className=\"p-2 pt-0\">\r\n                            <Col md={12}>\r\n                                <Row className=\"m-0 p-0\">\r\n                                    <Col md={12} className=\"m-0 p-0\">\r\n                                        <Row className=\"m-0 p-0\">\r\n                                            <Col md={12} className=\"text-left m-0 p-0 ml-3\">\r\n                                                <span>\r\n                                                    <b><FontAwesomeIcon icon={faUser} className=\"mr-1\" />Participant:</b>\r\n                                                    {` ${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                                </span>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"mt-2\">\r\n                                            <Col md={12}>\r\n                                                <RoomAssignmentForm />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            {isProcessing &&\r\n                                <Col md={12}>\r\n                                    <Paper className='p-2 m-2 mt-3'>\r\n                                        <LinearProgressBarWithLabel title='Assigning a room' />\r\n                                    </Paper>\r\n                                </Col>\r\n                            }\r\n                        </Row>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type='submit' className='mr-1' color='primary' disabled={isProcessing} style={{ minWidth: '120px' }}>\r\n                            <FontAwesomeIcon icon={faSave} /> Save\r\n                        </Button>\r\n                        <Button color='danger' onClick={props.toggle} disabled={isProcessing} style={{ minWidth: '120px' }}>\r\n                            <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdateRoomAssignment ","import React, { useState, useEffect, useCallback } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport API from '../../../../Api'\r\nimport { useAuth } from '../../../../context/auth'\r\nimport { useProfile } from '../../../../context/profile'\r\nimport { RoomAssignContext } from '../../../../context/roomAssign'\r\n\r\nimport { Tooltip, Button, Paper } from '@material-ui/core'\r\n\r\nimport { Container, Row, Col, ListGroup, ListGroupItem } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArchive, faDoorOpen, faEdit, faPlus } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport NewRoomAssignment from '../../Modals/NewRoomAssignment'\r\nimport UpdateRoomAssignment from '../../Modals/UpdateRoomAssignment'\r\nimport LinearProgressBarWithLabel from '../../Common/LinearProgressBarWithLabel'\r\n\r\nconst Rooms = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n    const [rooms, setRooms] = useState([])\r\n    const [selectedRoomAssignment, setSelectedRoomAssignment] = useState({})\r\n\r\n    const [isShowNewRoomAssignmentModal, setIsShowNewRoomAssignmentModal] = useState(false)\r\n    const toggleIsShowNewRoomAssignmentModal = () => setIsShowNewRoomAssignmentModal(!isShowNewRoomAssignmentModal)\r\n\r\n    const [isShowUpdateRoomAssignmentModal, setIsShowUpdateRoomAssignmentModal] = useState(false)\r\n    const toggleIsShowUpdateRoomAssignmentModal = () => setIsShowUpdateRoomAssignmentModal(!isShowUpdateRoomAssignmentModal)\r\n\r\n    const updateRoomAssignedHandler = (data) => {\r\n        setSelectedRoomAssignment(data)\r\n        toggleIsShowUpdateRoomAssignmentModal()\r\n    }\r\n\r\n    const archiveRoomAssigned = (id) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be able to revert this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes'\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                API.delete(`assignment/delete/${id}`, {\r\n                    headers: {\r\n                        'Authorization': 'bearer ' + token.access_token\r\n                    }\r\n                }).then(result => {\r\n                    if (result.data.status) {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'success'\r\n                        )\r\n                        loadAssignedRooms()\r\n                    } else {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'error'\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadAssignedRooms()\r\n    }, [])\r\n\r\n    const loadAssignedRooms = useCallback(() => {\r\n        setIsProcessing(true)\r\n        let data = {\r\n            \"event_id\": selectedProfile.event_id,\r\n            \"profile_id\": selectedProfile.profile_id\r\n        }\r\n\r\n        API.post(\"assignment/profile\", data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            let rooms = formatData(result)\r\n            setRooms(rooms)\r\n            setIsProcessing(false)\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n        })\r\n\r\n    }, [])\r\n\r\n    const formatData = (result) => {\r\n        if (result !== null && result.data.length > 0) {\r\n            return result.data.map((r) => {\r\n                let room = r.room\r\n                let roomList = [\r\n                    room.id,\r\n                    room.name,\r\n                    room.address,\r\n                    r\r\n                ]\r\n\r\n                return roomList\r\n            })\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    return (\r\n        <RoomAssignContext.Provider value={{ selectedRoomAssignment }}>\r\n            <Container fluid>\r\n                <Paper className=\"p-3 mt-3\">\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <h6 className=\"float-left\">Assigned Room/s</h6>\r\n                            <Button onClick={toggleIsShowNewRoomAssignmentModal} className=\"float-right m-0 p-0 pl-1 pr-1\" style={{ minWidth: \"0px\" }} variant=\"outlined\" color=\"primary\" size=\"small\">\r\n                                <FontAwesomeIcon icon={faPlus} className=\"mr-1\" />\r\n                                Assign Room\r\n                            </Button>\r\n                        </Col>\r\n                        <Col md={12}>\r\n                            <ListGroup style={{ overflow: \"auto\", overflowX: \"auto\", maxHeight: \"200px\" }}>\r\n                                {rooms.length > 0 &&\r\n                                    rooms.map((rm, index) => {\r\n                                        return <ListGroupItem key={index}>\r\n                                            <FontAwesomeIcon icon={faDoorOpen} className=\"mr-1 text-primary\" />\r\n                                            {`Room ${rm[1]} located at ${rm[2]}`}\r\n                                            <Tooltip title=\"Archive Room Assignment\" placement=\"top\">\r\n                                                <Button className=\"float-right text-danger\" style={{ minWidth: \"0px\" }} onClick={() => archiveRoomAssigned(rm[3].id)}>\r\n                                                    <FontAwesomeIcon icon={faArchive} />\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                            <Tooltip title=\"Update Room Assignment\" placement=\"top\">\r\n                                                <Button className=\"float-right text-primary\" style={{ minWidth: \"0px\" }} onClick={() => updateRoomAssignedHandler(rm[3])}>\r\n                                                    <FontAwesomeIcon icon={faEdit} />\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                        </ListGroupItem>\r\n                                    })\r\n                                }\r\n                                {\r\n                                    isProcessing &&\r\n                                    <ListGroupItem>\r\n                                        <LinearProgressBarWithLabel title=\"Loading records\" />\r\n                                    </ListGroupItem>\r\n                                }\r\n                                {\r\n                                    (rooms.length === 0 && !isProcessing) &&\r\n                                    <ListGroupItem className=\"text-center\">No Data to Display</ListGroupItem>\r\n                                }\r\n                            </ListGroup>\r\n                        </Col>\r\n                        {isShowNewRoomAssignmentModal &&\r\n                            <NewRoomAssignment isOpen={isShowNewRoomAssignmentModal} toggle={toggleIsShowNewRoomAssignmentModal} loadAssignedRooms={loadAssignedRooms} />\r\n                        }\r\n\r\n                        {\r\n                            isShowUpdateRoomAssignmentModal &&\r\n                            <UpdateRoomAssignment isOpen={isShowUpdateRoomAssignmentModal} toggle={toggleIsShowUpdateRoomAssignmentModal} loadAssignedRooms={loadAssignedRooms} />\r\n                        }\r\n                    </Row>\r\n                </Paper>\r\n            </Container>\r\n        </RoomAssignContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Rooms ","import { createContext, useContext } from 'react' \r\n\r\nexport const RemarksContext = createContext() \r\n\r\nexport function useRemarks() {\r\n  return useContext(RemarksContext) \r\n}","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport API from '../../../Api'\r\nimport { useAuth } from \"../../../context/auth\"\r\nimport { useProfile } from '../../../context/profile'\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faUser, faInfoCircle, faCommentDots } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper, Tooltip, TextField } from '@material-ui/core'\r\n\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst NewRemarks = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveNewRemarks = () => {\r\n\r\n        let remarks = document.querySelector(\"textarea[name=remarks]\").value\r\n\r\n        setIsProcessing(true)\r\n\r\n        let data = {\r\n            \"profile_id\": selectedProfile.profile_id,\r\n            \"event_id\": selectedProfile.event_id,\r\n            \"remarks\": remarks\r\n        }\r\n\r\n\r\n        API.post('carrier/remarks/store', data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token,\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n\r\n                document.querySelector(\"textarea[name=remarks]\").value = \"\"\r\n                if(props.loadRemarks !== null){\r\n                    props.loadRemarks()\r\n                }\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={\"static\"} isOpen={props.isOpen} toggle={props.toggle} className=\"modal-lg\" style={{ marginLeft: props.modalMargin, marginTop: \"5%\" }}>\r\n                <ModalHeader>\r\n                    <FontAwesomeIcon icon={faCommentDots} className=\"mr-1\" />\r\n                    New Remarks <br />\r\n                    <small className=\"text-danger\">\r\n                        <FontAwesomeIcon icon={faInfoCircle} className=\"mr-1\" />\r\n                        Note: Fields with * are required fields\r\n                    </small>\r\n                </ModalHeader>\r\n                <ModalBody className=\"mt-0 pt-0\">\r\n                    <Row className=\"p-2 pt-0\">\r\n                        <Col md={12} className=\"text-center\">\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <Row className=\"m-0 p-0\">\r\n                                        <Col md={12} className=\"text-left m-0 p-0\">\r\n                                            <span>\r\n                                                <b><FontAwesomeIcon icon={faUser} className=\"mr-1\" />Participant:</b>\r\n                                                {` ${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                            </span>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className=\"mt-3\">\r\n                                        <Col md={12}>\r\n                                            <Tooltip title=\"Enter new remarks\" placement=\"top\">\r\n                                                <TextField\r\n                                                    name=\"remarks\"\r\n                                                    label=\"Remarks\"\r\n                                                    placeholder=\"Remarks\"\r\n                                                    multiline\r\n                                                    rows={3}\r\n                                                    fullWidth\r\n                                                    variant=\"outlined\"\r\n                                                    required\r\n                                                />\r\n                                            </Tooltip>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        {isProcessing &&\r\n                            <Col md={12}>\r\n                                <Paper className=\"p-2 m-2 mt-3\">\r\n                                    <LinearProgressBarWithLabel title=\"Adding new remarks\" />\r\n                                </Paper>\r\n                            </Col>\r\n                        }\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button type=\"submit\" onClick={saveNewRemarks} color=\"primary\" disabled={isProcessing} style={{ minWidth: \"120px\" }} className=\"mr-1\">\r\n                        <FontAwesomeIcon icon={faSave} /> Save\r\n                    </Button>\r\n                    <Button color=\"danger\" onClick={props.toggle} disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                        <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewRemarks ","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport API from '../../../Api'\r\nimport { useAuth } from '../../../context/auth'\r\nimport { useProfile } from '../../../context/profile'\r\nimport { useRemarks } from '../../../context/remarks'\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faUser, faInfoCircle, faCommentDots } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper, Tooltip, TextField } from '@material-ui/core'\r\n\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst UpdateRemarks = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const selectedRemarks = useRemarks().selectedRemarks\r\n    const [remarks, setRemarks] = useState(selectedRemarks[1] || \"\")\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveUpdateRemarks = () => {\r\n\r\n        let remarks = document.querySelector('textarea[name=remarks]').value\r\n\r\n        setIsProcessing(true)\r\n\r\n        let data = {\r\n            'profile_id': selectedRemarks[2].profile_id,\r\n            'event_id': selectedRemarks[2].event_id,\r\n            'remarks': remarks\r\n        }\r\n\r\n\r\n        API.put(`carrier/remarks/update/${selectedRemarks[0]}`, data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token,\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n                \r\n                props.loadRemarks()\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={'static'} isOpen={props.isOpen} toggle={props.toggle} className='modal-lg' style={{ marginLeft: props.modalMargin, marginTop: '5%' }}>\r\n                <ModalHeader>\r\n                    <FontAwesomeIcon icon={faCommentDots} className='mr-1' />\r\n                    New Remarks <br />\r\n                    <small className='text-danger'>\r\n                        <FontAwesomeIcon icon={faInfoCircle} className='mr-1' />\r\n                        Note: Fields with * are required fields\r\n                    </small>\r\n                </ModalHeader>\r\n                <ModalBody className='mt-0 pt-0'>\r\n                    <Row className='p-2 pt-0'>\r\n                        <Col md={12} className='text-center'>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <Row className='m-0 p-0'>\r\n                                        <Col md={12} className='text-left m-0 p-0'>\r\n                                            <span>\r\n                                                <b><FontAwesomeIcon icon={faUser} className='mr-1' />Participant:</b>\r\n                                                {` ${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                            </span>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className='mt-3'>\r\n                                        <Col md={12}>\r\n                                            <Tooltip title='Enter new remarks' placement='top'>\r\n                                                <TextField\r\n                                                    name='remarks'\r\n                                                    label='Remarks'\r\n                                                    value={remarks}\r\n                                                    onChange={(e) => setRemarks(e.target.value)}\r\n                                                    multiline\r\n                                                    rows={3}\r\n                                                    fullWidth\r\n                                                    variant='outlined'\r\n                                                    required\r\n                                                />\r\n                                            </Tooltip>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        {isProcessing &&\r\n                            <Col md={12}>\r\n                                <Paper className='p-2 m-2 mt-3'>\r\n                                    <LinearProgressBarWithLabel title='Updating remarks' />\r\n                                </Paper>\r\n                            </Col>\r\n                        }\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button type='submit' onClick={saveUpdateRemarks} color='primary' disabled={isProcessing} style={{ minWidth: '120px' }} className='mr-1'>\r\n                        <FontAwesomeIcon icon={faSave} /> Save\r\n                    </Button>\r\n                    <Button color='danger' onClick={props.toggle} disabled={isProcessing} style={{ minWidth: '120px' }}>\r\n                        <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdateRemarks ","import React, { useState, useEffect, useCallback } from 'react'\r\nimport Swal from \"sweetalert2\"\r\nimport { useProfile } from '../../../../context/profile'\r\nimport { useAuth } from '../../../../context/auth'\r\nimport { RemarksContext } from '../../../../context/remarks'\r\nimport API from '../../../../Api'\r\n\r\nimport { Container, Row, Col, ListGroup, ListGroupItem } from 'reactstrap'\r\nimport { Button, Tooltip, Paper } from '@material-ui/core'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArchive, faCommentDots, faEdit, faPlus } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport NewRemarks from '../../Modals/NewRemarks'\r\nimport UpdateRemarks from '../../Modals/UpdateRemarks'\r\nimport LinearProgressBarWithLabel from '../../Common/LinearProgressBarWithLabel'\r\n\r\n\r\nconst Remarks = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n    const [remarks, setRemarks] = useState([])\r\n    const [selectedRemarks, setSelectedRemarks] = useState({})\r\n\r\n    const [isShowRemarksModal, setIsShowRemarksModal] = useState(false)\r\n    const toggleIsShowRemarksModal = () => setIsShowRemarksModal(!isShowRemarksModal)\r\n\r\n    const [isShowUpdateRemarksModal, setIsShowUpdateRemarksModal] = useState(false)\r\n    const toggleIsShowUpdateRemarksModal = () => setIsShowUpdateRemarksModal(!isShowUpdateRemarksModal)\r\n\r\n    const loadRemarks = useCallback(() => {\r\n        setIsProcessing(true)\r\n        API.get(`carrier/remarks/profile/${selectedProfile.profile_id}`, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            setIsProcessing(false)\r\n            setRemarks(formatData(result))\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n        })\r\n    }, [])\r\n\r\n    const formatData = (result) => {\r\n        if (result !== null && result.data.length > 0) {\r\n            return result.data.map((remarks) => {\r\n                let remarksList = [\r\n                    remarks.id,\r\n                    remarks.remarks,\r\n                    remarks\r\n                ]\r\n\r\n                return remarksList\r\n            })\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const updateRemarks = (data) => {\r\n        setSelectedRemarks(data)\r\n        toggleIsShowUpdateRemarksModal()\r\n    }\r\n\r\n    const archiveRemarks = (id) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be able to revert this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes'\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                API.delete(`carrier/remarks/delete/${id}`, {\r\n                    headers: {\r\n                        'Authorization': 'bearer ' + token.access_token\r\n                    }\r\n                }).then(result => {\r\n                    if (result.data.status) {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'success'\r\n                        )\r\n                        loadRemarks()\r\n                    } else {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'error'\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadRemarks()\r\n    }, [])\r\n\r\n    return (\r\n        <RemarksContext.Provider value={{ selectedRemarks }}>\r\n            <Container fluid>\r\n                <Paper className=\"p-3 mt-3\">\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <h6 className=\"float-left\">Remarks List</h6>\r\n                            <Button onClick={toggleIsShowRemarksModal} className=\"float-right m-0 p-0 pl-1 pr-1\" style={{ minWidth: \"0px\" }} variant=\"outlined\" color=\"primary\" size=\"small\">\r\n                                <FontAwesomeIcon icon={faPlus} className=\"mr-1\" />\r\n                                New Remark\r\n                            </Button>\r\n                        </Col>\r\n                        <Col md={12}>\r\n                            <ListGroup style={{ overflow: \"auto\", overflowX: \"auto\", maxHeight: \"200px\" }}>\r\n                                {remarks.length > 0 &&\r\n                                    remarks.map((rm, index) => {\r\n                                        return <ListGroupItem key={index}>\r\n                                            <FontAwesomeIcon icon={faCommentDots} className=\"text-success mr-1\" />\r\n                                            {rm[1]}\r\n                                            <Tooltip title=\"Archive Remark\" placement=\"top\">\r\n                                                <Button className=\"float-right text-danger\" style={{ minWidth: \"0px\" }} onClick={() => archiveRemarks(rm[0])}>\r\n                                                    <FontAwesomeIcon icon={faArchive} />\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                            <Tooltip title=\"Update Remark\" placement=\"top\">\r\n                                                <Button className=\"float-right text-primary\" style={{ minWidth: \"0px\" }} onClick={() => updateRemarks(rm)}>\r\n                                                    <FontAwesomeIcon icon={faEdit} />\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                        </ListGroupItem>\r\n                                    })\r\n                                }\r\n                                {\r\n                                    isProcessing &&\r\n                                    <ListGroupItem>\r\n                                        <LinearProgressBarWithLabel title=\"Loading records\" />\r\n                                    </ListGroupItem>\r\n                                }\r\n                                {\r\n                                    (remarks.length === 0 && !isProcessing) &&\r\n                                    <ListGroupItem className=\"text-center\">No Data to Display</ListGroupItem>\r\n                                }\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Paper>\r\n\r\n                {isShowRemarksModal &&\r\n                    <NewRemarks isOpen={isShowRemarksModal} toggle={toggleIsShowRemarksModal} loadRemarks={loadRemarks} />\r\n                }\r\n\r\n                {isShowUpdateRemarksModal &&\r\n                    <UpdateRemarks isOpen={isShowUpdateRemarksModal} toggle={toggleIsShowUpdateRemarksModal} loadRemarks={loadRemarks} />\r\n                }\r\n            </Container>\r\n        </RemarksContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Remarks ","import React, { useState } from 'react'\r\nimport { useProfile } from '../../../context/profile'\r\nimport { TextField, Paper } from '@material-ui/core'\r\nimport { Container, Row, Col } from 'reactstrap'\r\n\r\n\r\nconst AddressForm = (props) => {\r\n\r\n    const address = useProfile().selectedProfile.profile.address || {}\r\n    const [specificAddress, setSpecificAddress] = useState(address.specific_address || \"\")\r\n    const [barangay, setBarangay] = useState(address.barangay || \"\")\r\n    const [zipcode, setZipcode] = useState(address.zipcode || \"\")\r\n\r\n    console.log(address)\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Paper className=\"pt-0 mt-3\">\r\n                <Row className=\"m-0 p-0 pl-3 pt-2 pr-3 pb-4\">\r\n                    <Col md={6}>\r\n                        <TextField\r\n                            value={specificAddress}\r\n                            onChange={(e) => setSpecificAddress(e.target.value)}\r\n                            name=\"specificAddress\"\r\n                            label=\"Street/Purok/Block\"\r\n                            fullWidth\r\n                            required\r\n                        />\r\n                        <TextField\r\n                            value={barangay}\r\n                            onChange={(e) => setBarangay(e.target.value)}\r\n                            name=\"barangay\"\r\n                            label=\"Barangay\"\r\n                            fullWidth\r\n                            required\r\n                        />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <TextField\r\n                            value={zipcode}\r\n                            onChange={(e) => setZipcode(e.target.value)}\r\n                            name=\"zipcode\"\r\n                            label=\"Zipcode\"\r\n                            fullWidth\r\n                            required\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Paper>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default AddressForm\r\n","import React from 'react' \r\nimport AddressForm from '../../Forms/AddressForm' \r\n\r\nconst Address = (props) => {\r\n    return (\r\n        <div>\r\n          <AddressForm />\r\n       </div>\r\n    ) \r\n} \r\n\r\nexport default Address ","import React, { useState } from 'react'\r\nimport { useProfile } from '../../../context/profile'\r\nimport { TextField, Paper } from '@material-ui/core'\r\nimport { Container, Row, Col } from 'reactstrap'\r\n\r\n\r\nconst SchoolForm = (props) => {\r\n\r\n    const school = useProfile().selectedProfile.profile.school || {}\r\n    const [schoolName, setSchoolName] = useState(school.school || \"\")\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Paper className=\"pt-0 mt-3\">\r\n                <Row className=\"m-0 p-0 pl-3 pt-2 pr-3 pb-4\">\r\n                    <Col md={12}>\r\n                        <TextField\r\n                            value={schoolName}\r\n                            onChange={(e) => setSchoolName(e.target.value)}\r\n                            name=\"school\"\r\n                            label=\"School\"\r\n                            fullWidth\r\n                            required\r\n                        />                       \r\n                    </Col>                    \r\n                </Row>\r\n            </Paper>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default SchoolForm\r\n","import React from 'react' \r\nimport SchoolForm from '../../Forms/SchoolForm' \r\n\r\nconst School = (props) => {\r\n    return (\r\n        <div>\r\n          <SchoolForm />\r\n       </div>\r\n    ) \r\n} \r\n\r\nexport default School ","import { createContext, useContext } from 'react' \r\n\r\nexport const TestsContext = createContext() \r\n\r\nexport function useTests() {\r\n  return useContext(TestsContext) \r\n}","import React, { useState } from 'react' \r\nimport { useTests } from '../../../../context/tests'\r\nimport TextField from '@material-ui/core/TextField' \r\nimport MenuItem from '@material-ui/core/MenuItem' \r\n\r\nconst TestTypesSelect = (props) => {\r\n    const selectedTests = useTests().selectedTests\r\n    const [testType, setTestType] = useState(selectedTests[2] || '') \r\n    const testTypeOptions = [\r\n        {\r\n            value: \"1\",\r\n            label: \"RT-PCT\"\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                select\r\n                label=\"Select Test Type\"\r\n                name=\"testType\"\r\n                value={testType}\r\n                onChange={(e) => setTestType(e.target.value)}\r\n                fullWidth\r\n                required\r\n            >\r\n                {testTypeOptions.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                    </MenuItem>\r\n                ))}\r\n            </TextField>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestTypesSelect ","import React, { useState, useEffect } from 'react' \r\nimport { useTests } from '../../../../context/tests'\r\nimport TextField from '@material-ui/core/TextField' \r\nimport MenuItem from '@material-ui/core/MenuItem' \r\n\r\nconst TestsStatusSelect = (props) => {\r\n    const selectedTests = useTests().selectedTests\r\n    const [testStatus, setTestStatus] = useState(selectedTests[3] || \"\") \r\n\r\n    const statusOptions = [\r\n        {\r\n            value: \"PENDING\",\r\n            label: \"PENDING\"\r\n        },\r\n        {\r\n            value: \"POSITIVE\",\r\n            label: \"POSITIVE\"\r\n        },\r\n        {\r\n            value: \"NEGATIVE\",\r\n            label: \"NEGATIVE\"\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                select\r\n                label=\"Select Status Type\"\r\n                name=\"testStatus\"\r\n                value={testStatus}\r\n                onChange={(e) => setTestStatus(e.target.value)}\r\n                fullWidth\r\n                required\r\n            >\r\n                {statusOptions.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                    </MenuItem>\r\n                ))}\r\n            </TextField>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestsStatusSelect","import React, {useState} from 'react' \r\nimport { useTests } from '../../../../context/tests'\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers' \r\nimport DateFnsUtils from '@date-io/date-fns' \r\n\r\nconst TestReleaseDate = (props) => {\r\n    const selectedTests = useTests().selectedTests\r\n    const [testRelease, setTestRelease] = useState(selectedTests[5] || null)\r\n\r\n    const changeHandler = (value) => {\r\n        setTestRelease(value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                    label=\"Date Released\"\r\n                    name=\"testRelease\"\r\n                    value={testRelease}\r\n                    onChange={(date, value) => changeHandler(value)}\r\n                    format=\"MMM/d/yyyy\"\r\n                    required\r\n                    clearable\r\n                    hideTabs\r\n                    fullWidth\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestReleaseDate ","import React, { useState } from 'react'\r\nimport { useTests } from '../../../context/tests'\r\nimport { TextField, Paper } from '@material-ui/core'\r\nimport { Container, Row, Col } from 'reactstrap'\r\n\r\nimport TestTypesSelect from '../Forms/Fields/TestTypesSelect'\r\nimport TestsStatusSelect from '../Forms/Fields/TestsStatusSelect'\r\nimport TestReleaseDate from './Fields/TestReleaseDate'\r\n\r\nconst TestsForm = (props) => {\r\n\r\n    const selectedTests = useTests().selectedTests\r\n    const [testsLocation, setTestLocation] = useState(selectedTests[4] || \"\")\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Paper className=\"pt-0 mt-3\">\r\n                <Row className=\"m-0 p-0 pl-3 pt-2 pr-3 pb-4\">\r\n                    <Col md={6} className=\"mt-1\">\r\n                        <TestTypesSelect />\r\n                        <TextField\r\n                            value={testsLocation}\r\n                            onChange={(e) => setTestLocation(e.target.value)}\r\n                            name=\"testLocation\"\r\n                            label=\"Test Location\"\r\n                            fullWidth\r\n                            required\r\n                        />\r\n                    </Col>\r\n                    <Col md={6} className=\"mt-1\">\r\n                        <TestsStatusSelect />\r\n                        <TestReleaseDate />\r\n                    </Col>\r\n                </Row>\r\n            </Paper>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default TestsForm\r\n","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport API from '../../../Api'\r\nimport { useAuth } from \"../../../context/auth\"\r\nimport { useProfile } from \"../../../context/profile\"\r\nimport { TestsContext } from \"../../../context/tests\"\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faUser, faInfoCircle, faCommentDots, faSyringe } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper, Tooltip, TextField } from '@material-ui/core'\r\n\r\nimport TestsForm from '../Forms/TestsForm'\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst NewTests = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const [selectedTests, setSelectedTests] = useState([])\r\n    const dateFns = new DateFnsUtils()\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveNewTest = () => {\r\n\r\n        setIsProcessing(true)\r\n\r\n        let data = {\r\n            \"profile_id\": selectedProfile.profile_id,\r\n            \"test_type_id\": document.querySelector(\"input[name=testType]\").value,\r\n            \"value\": document.querySelector(\"input[name=testStatus]\").value,\r\n            \"location\": document.querySelector(\"input[name=testLocation]\").value,\r\n            \"released\": dateFns.format(new Date(document.querySelector(\"input[name=testRelease]\").value), \"Y-M-dd\"),\r\n        }\r\n\r\n\r\n        API.post(`test/store`, data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n\r\n                data.id = result.data.test_id\r\n\r\n                selectedProfile.profile.tests = data\r\n\r\n                setIsProcessing(false)\r\n\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n\r\n                props.loadTests()\r\n                props.toggle()\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <TestsContext.Provider value={{ selectedTests }}>\r\n            <div>\r\n                <Modal backdrop={\"static\"} isOpen={props.isOpen} toggle={props.toggle} className=\"modal-lg\" style={{ marginLeft: props.modalMargin, marginTop: \"5%\" }}>\r\n                    <ModalHeader>\r\n                        <FontAwesomeIcon icon={faSyringe} className=\"mr-1\" />\r\n                    New Test <br />\r\n                        <small className=\"text-danger\">\r\n                            <FontAwesomeIcon icon={faInfoCircle} className=\"mr-1\" />\r\n                        Note: Fields with * are required fields\r\n                    </small>\r\n                    </ModalHeader>\r\n                    <ModalBody className=\"mt-0 pt-0\">\r\n                        <Row className=\"p-2 pt-0\">\r\n                            <Col md={12}>\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <Row className=\"m-0 p-0\">\r\n                                            <Col md={12} className=\"text-left m-0 p-0 ml-3\">\r\n                                                <span>\r\n                                                    <b><FontAwesomeIcon icon={faUser} className=\"mr-1\" />Participant:</b>\r\n                                                    {` ${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                                </span>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"mt-2\">\r\n                                            <Col md={12}>\r\n                                                <TestsForm />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            {isProcessing &&\r\n                                <Col md={12}>\r\n                                    <Paper className=\"p-2 m-2 mt-3\">\r\n                                        <LinearProgressBarWithLabel title=\"Adding new test\" />\r\n                                    </Paper>\r\n                                </Col>\r\n                            }\r\n                        </Row>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" onClick={saveNewTest} color=\"primary\" disabled={isProcessing} style={{ minWidth: \"120px\" }} className=\"mr-1\">\r\n                            <FontAwesomeIcon icon={faSave} /> Save\r\n                    </Button>\r\n                        <Button color=\"danger\" onClick={props.toggle} disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                    </Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        </TestsContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NewTests ","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport API from '../../../Api'\r\nimport { useAuth } from '../../../context/auth'\r\nimport { useProfile } from '../../../context/profile'\r\nimport { useTests } from '../../../context/tests'\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faUser, faInfoCircle, faSyringe } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport TestsForm from '../Forms/TestsForm'\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst UpdateTests = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const selectedTests = useTests().selectedTests\r\n    const dateFns = new DateFnsUtils()\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveUpdateTest = () => {\r\n    \r\n        setIsProcessing(true)\r\n\r\n        let data = {\r\n            \"profile_id\": selectedProfile.profile_id,\r\n            \"test_type_id\": document.querySelector(\"input[name=testType]\").value,\r\n            \"value\": document.querySelector(\"input[name=testStatus]\").value,\r\n            \"location\": document.querySelector(\"input[name=testLocation]\").value,\r\n            \"released\": dateFns.format(new Date(document.querySelector(\"input[name=testRelease]\").value), \"Y-M-dd\"),\r\n        }\r\n\r\n\r\n        API.put(`test/update/${selectedTests[0]}`, data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token,\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n\r\n                props.loadTests()\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={'static'} isOpen={props.isOpen} toggle={props.toggle} className='modal-lg' style={{ marginLeft: props.modalMargin, marginTop: '5%' }}>\r\n                <ModalHeader>\r\n                    <FontAwesomeIcon icon={faSyringe} className='mr-1' />\r\n                    Update Test <br />\r\n                    <small className='text-danger'>\r\n                        <FontAwesomeIcon icon={faInfoCircle} className='mr-1' />\r\n                        Note: Fields with * are required fields\r\n                    </small>\r\n                </ModalHeader>\r\n                <ModalBody className='mt-0 pt-0'>\r\n                    <Row className='p-2 pt-0'>\r\n                        <Col md={12}>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <Row className='m-0 p-0'>\r\n                                        <Col md={12} className='text-left m-0 p-0 ml-3'>\r\n                                            <span>\r\n                                                <b><FontAwesomeIcon icon={faUser} className='mr-1' />Participant:</b>\r\n                                                {` ${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                            </span>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className='mt-2'>\r\n                                        <Col md={12}>\r\n                                            <TestsForm />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        {isProcessing &&\r\n                            <Col md={12}>\r\n                                <Paper className='p-2 m-2 mt-3'>\r\n                                    <LinearProgressBarWithLabel title='Updating test' />\r\n                                </Paper>\r\n                            </Col>\r\n                        }\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button type='submit' onClick={saveUpdateTest} color='primary' disabled={isProcessing} style={{ minWidth: '120px' }} className='mr-1'>\r\n                        <FontAwesomeIcon icon={faSave} /> Save\r\n                    </Button>\r\n                    <Button color='danger' onClick={props.toggle} disabled={isProcessing} style={{ minWidth: '120px' }}>\r\n                        <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdateTests ","import React, { useState, useEffect, useCallback } from 'react'\r\nimport Swal from \"sweetalert2\"\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport { useProfile } from '../../../../context/profile'\r\nimport { useAuth } from '../../../../context/auth'\r\nimport { TestsContext } from '../../../../context/tests'\r\nimport API from '../../../../Api'\r\n\r\nimport { Container, Row, Col, ListGroup, ListGroupItem } from 'reactstrap'\r\nimport { Button, Tooltip, Paper } from '@material-ui/core'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArchive, faCommentDots, faEdit, faPlus, faSyringe } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport NewTests from '../../Modals/NewTests'\r\nimport UpdateTests from '../../Modals/UpdateTests'\r\nimport LinearProgressBarWithLabel from '../../Common/LinearProgressBarWithLabel'\r\n\r\n\r\nconst Tests = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const dateFns = new DateFnsUtils()\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n    const [tests, setTests] = useState([])\r\n    const [selectedTests, setSelectedTests] = useState({})\r\n\r\n    const [isShowNewTestsModal, setIsShowNewTestsModal] = useState(false)\r\n    const toggleIsShowNewTestsModal = () => setIsShowNewTestsModal(!isShowNewTestsModal)\r\n\r\n    const [isShowUpdateTestsModal, setIsShowUpdateTestsModal] = useState(false)\r\n    const toggleIsShowUpdateTestsModal = () => setIsShowUpdateTestsModal(!isShowUpdateTestsModal)\r\n\r\n    const loadTests = useCallback(() => {\r\n        setIsProcessing(true)\r\n        API.get(`test/profile/${selectedProfile.profile_id}`, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            setIsProcessing(false)\r\n            setTests(formatData(result))\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n        })\r\n    }, [])\r\n\r\n    const formatData = (result) => {\r\n        if (result !== null && result.data.length > 0) {\r\n            return result.data.map((tests) => {\r\n                let testsList = [\r\n                    tests.id,\r\n                    tests.test_type.type,\r\n                    tests.test_type_id,\r\n                    tests.value,\r\n                    tests.location,\r\n                    dateFns.format(new Date(tests.released), \"MMM/d/yyyy\"),\r\n                    tests\r\n                ]\r\n\r\n                return testsList\r\n            })\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n\r\n\r\n    const updateTests = (data) => {\r\n        setSelectedTests(data)\r\n        toggleIsShowUpdateTestsModal()\r\n    }\r\n\r\n    const archiveTests = (id) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be able to revert this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmtButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmtButtonText: 'Yes'\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                API.delete(`test/delete/${id}`, {\r\n                    headers: {\r\n                        'Authorization': 'bearer ' + token.access_token\r\n                    }\r\n                }).then(result => {\r\n                    if (result.data.status) {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'success'\r\n                        )\r\n                        loadTests()\r\n                    } else {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'error'\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadTests()        \r\n    }, [])\r\n\r\n    return (\r\n        <TestsContext.Provider value={{ selectedTests }}>\r\n            <Container fluid>\r\n                <Paper className=\"p-3 mt-3\">\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <h6 className=\"float-left\">Tests List</h6>\r\n                            <Button onClick={toggleIsShowNewTestsModal} className=\"float-right m-0 p-0 pl-1 pr-1\" style={{ minWidth: \"0px\" }} variant=\"outlined\" color=\"primary\" size=\"small\">\r\n                                <FontAwesomeIcon icon={faPlus} className=\"mr-1\" />\r\n                                New Test\r\n                            </Button>\r\n                        </Col>\r\n                        <Col md={12}>\r\n                            <ListGroup style={{ overflow: \"auto\", overflowX: \"auto\", maxHeight: \"200px\" }}>\r\n                                {tests.length > 0 &&\r\n                                    tests.map((tst, index) => {\r\n                                        return <ListGroupItem key={index}>\r\n                                            <FontAwesomeIcon icon={faSyringe} className=\"text-danger mr-1\" />\r\n                                            {`${tst[1]} ${tst[3]} @ ${tst[4]}`}\r\n                                            <Tooltip title=\"Archive Test\" placement=\"top\">\r\n                                                <Button className=\"float-right text-danger\" style={{ minWidth: \"0px\" }} onClick={() => archiveTests(tst[0])}>\r\n                                                    <FontAwesomeIcon icon={faArchive} />\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                            <Tooltip title=\"Update Test\" placement=\"top\">\r\n                                                <Button className=\"float-right text-primary\" style={{ minWidth: \"0px\" }} onClick={() => updateTests(tst)}>\r\n                                                    <FontAwesomeIcon icon={faEdit} />\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                        </ListGroupItem>\r\n                                    })\r\n                                }\r\n                                {\r\n                                    isProcessing &&\r\n                                    <ListGroupItem>\r\n                                        <LinearProgressBarWithLabel title=\"Loading records\" />\r\n                                    </ListGroupItem>\r\n                                }\r\n                                {\r\n                                    (tests.length === 0 && !isProcessing) &&\r\n                                    <ListGroupItem className=\"text-center\">No Data to Display</ListGroupItem>\r\n                                }\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Paper>\r\n                {isShowNewTestsModal &&\r\n                    <NewTests isOpen={isShowNewTestsModal} toggle={toggleIsShowNewTestsModal} loadTests={loadTests} />\r\n                }\r\n                {isShowUpdateTestsModal &&\r\n                    <UpdateTests isOpen={isShowUpdateTestsModal} toggle={toggleIsShowUpdateTestsModal} loadTests={loadTests} />\r\n                }\r\n            </Container>\r\n        </TestsContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Tests ","import { createContext, useContext } from 'react' \r\n\r\nexport const CompanionsContext = createContext() \r\n\r\nexport function useCompanions() {\r\n  return useContext(CompanionsContext) \r\n}","import React, { useState } from 'react'\r\nimport { useCompanions } from '../../../context/companions'\r\n\r\nimport { TextField } from '@material-ui/core'\r\nimport { Container, Row, Col } from 'reactstrap'\r\n\r\nconst CompanionForm = (props) => {\r\n\r\n    const selectedCompanions = useCompanions().selectedCompanions\r\n    const [companionName, setCompanionName] = useState(selectedCompanions[1] || \"\")\r\n    const [contact, setContact] = useState(selectedCompanions[3] || \"\")\r\n    const [relationship, setRelationship] = useState(selectedCompanions[2] || \"\")\r\n    const [address, setAddress] = useState(selectedCompanions[4] || \"\")\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row className=\"m-0 p-0\">\r\n                <Col md={6}>\r\n                    <TextField\r\n                        value={companionName}\r\n                        onChange={(e) => setCompanionName(e.target.value)}\r\n                        name=\"companionName\"\r\n                        label=\"Companion Name\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n                <Col md={6}>\r\n                    <TextField\r\n                        type=\"number\"\r\n                        value={contact}\r\n                        onChange={(e) => setContact(e.target.value)}\r\n                        name=\"contact\"\r\n                        label=\"Contact Number\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"m-0 p-0 mt-2\">               \r\n                <Col md={6}>\r\n                    <TextField\r\n                        value={relationship}\r\n                        onChange={(e) => setRelationship(e.target.value)}\r\n                        name=\"relationship\"\r\n                        label=\"Relationship\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n                <Col md={6}>\r\n                    <TextField\r\n                        value={address}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                        name=\"address\"\r\n                        label=\"Address\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default CompanionForm\r\n","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport API from '../../../Api'\r\nimport { useAuth } from \"../../../context/auth\"\r\nimport { useProfile } from '../../../context/profile'\r\nimport { CompanionsContext } from '../../../context/companions'\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faUser, faInfoCircle, faCommentDots } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper, Tooltip, TextField } from '@material-ui/core'\r\n\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\nimport CompanionForm from '../Forms/CompanionForm'\r\n\r\nconst NewCompanions = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const [selectedCompanions, setSelectedCompanions] = useState([])\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveNewCompanions = () => {\r\n\r\n        let companionName = document.querySelector(\"input[name=companionName]\").value\r\n        let contact = document.querySelector(\"input[name=contact]\").value\r\n        let relationship = document.querySelector(\"input[name=relationship]\").value\r\n        let address = document.querySelector(\"input[name=address]\").value\r\n\r\n        setIsProcessing(true)\r\n\r\n        let data = {\r\n            \"profile_id\": selectedProfile.profile_id,\r\n            \"event_id\": selectedProfile.event_id,\r\n            \"name\": companionName,\r\n            \"contact\": contact,\r\n            \"relationship\": relationship,\r\n            \"address\": address\r\n        }\r\n\r\n\r\n        API.post('companion/store', data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token,\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n\r\n                if (props.loadCompanions !== null) {\r\n                    props.loadCompanions()\r\n                }\r\n\r\n                props.toggle()\r\n\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <CompanionsContext.Provider value={{ selectedCompanions }}>\r\n            <div>\r\n                <Modal backdrop={\"static\"} isOpen={props.isOpen} toggle={props.toggle} className=\"modal-lg\" style={{ marginLeft: props.modalMargin, marginTop: \"5%\" }}>\r\n                    <ModalHeader>\r\n                        <FontAwesomeIcon icon={faCommentDots} className=\"mr-1\" />\r\n                        New Companion <br />\r\n                        <small className=\"text-danger\">\r\n                            <FontAwesomeIcon icon={faInfoCircle} className=\"mr-1\" />\r\n                        Note: Fields with * are required fields\r\n                    </small>\r\n                    </ModalHeader>\r\n                    <ModalBody className=\"mt-0 pt-0\">\r\n                        <Row className=\"p-2 pt-0\">\r\n                            <Col md={12} className=\"text-center\">\r\n                                <Row> \r\n                                    <Col md={12}>\r\n                                        <Row className=\"m-0 p-0\">\r\n                                            <Col md={12} className=\"text-left m-0 p-0 ml-4 pl-2\">\r\n                                                <span>\r\n                                                    <b><FontAwesomeIcon icon={faUser} className=\"mr-1\" />Participant:</b>\r\n                                                    {` ${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                                </span>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"mt-1\">\r\n                                            <Col md={12}>\r\n                                                <CompanionForm />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            {isProcessing &&\r\n                                <Col md={12}>\r\n                                    <Paper className=\"p-2 m-2 mt-3\">\r\n                                        <LinearProgressBarWithLabel title=\"Adding new companion\" />\r\n                                    </Paper>\r\n                                </Col>\r\n                            }\r\n                        </Row>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" onClick={saveNewCompanions} color=\"primary\" disabled={isProcessing} style={{ minWidth: \"120px\" }} className=\"mr-1\">\r\n                            <FontAwesomeIcon icon={faSave} /> Save\r\n                    </Button>\r\n                        <Button color=\"danger\" onClick={props.toggle} disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                    </Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        </CompanionsContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NewCompanions ","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport API from '../../../Api'\r\nimport { useAuth } from '../../../context/auth'\r\nimport { useProfile } from '../../../context/profile'\r\nimport { useCompanions } from '../../../context/companions'\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faUser, faInfoCircle, faUsers } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\nimport CompanionForm from '../Forms/CompanionForm'\r\n\r\nconst UpdateCompanions = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const selectedCompanions = useCompanions().selectedCompanions\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveUpdateCompanions = () => {\r\n\r\n        let companionName = document.querySelector(\"input[name=companionName]\").value\r\n        let contact = document.querySelector(\"input[name=contact]\").value\r\n        let relationship = document.querySelector(\"input[name=relationship]\").value\r\n        let address = document.querySelector(\"input[name=address]\").value\r\n\r\n        setIsProcessing(true)\r\n\r\n        let data = {\r\n            \"profile_id\": selectedProfile.profile_id,\r\n            \"event_id\": selectedProfile.event_id,\r\n            \"name\": companionName,\r\n            \"contact\": contact,\r\n            \"relationship\": relationship,\r\n            \"address\": address\r\n        }\r\n\r\n\r\n        API.put(`companion/update/${selectedCompanions[0]}`, data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token,\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n\r\n                props.loadCompanions()\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={'static'} isOpen={props.isOpen} toggle={props.toggle} className='modal-lg' style={{ marginLeft: props.modalMargin, marginTop: '5%' }}>\r\n                <ModalHeader>\r\n                    <FontAwesomeIcon icon={faUsers} className='mr-1' />\r\n                    Update Companions <br />\r\n                    <small className='text-danger'>\r\n                        <FontAwesomeIcon icon={faInfoCircle} className='mr-1' />\r\n                        Note: Fields with * are required fields\r\n                    </small>\r\n                </ModalHeader>\r\n                <ModalBody className='mt-0 pt-0'>\r\n                    <Row className='p-2 pt-0'>\r\n                        <Col md={12} className='text-center'>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <Row className='m-0 p-0'>\r\n                                        <Col md={12} className='text-left m-0 p-0 ml-4 pl-2'>\r\n                                            <span>\r\n                                                <b><FontAwesomeIcon icon={faUser} className='mr-1' />Participant:</b>\r\n                                                {` ${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                            </span>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className='mt-2'>\r\n                                        <Col md={12}>\r\n                                            <CompanionForm />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        {isProcessing &&\r\n                            <Col md={12}>\r\n                                <Paper className='p-2 m-2 mt-3'>\r\n                                    <LinearProgressBarWithLabel title='Updating companion info' />\r\n                                </Paper>\r\n                            </Col>\r\n                        }\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button type='submit' onClick={saveUpdateCompanions} color='primary' disabled={isProcessing} style={{ minWidth: '120px' }} className='mr-1'>\r\n                        <FontAwesomeIcon icon={faSave} /> Save\r\n                    </Button>\r\n                    <Button color='danger' onClick={props.toggle} disabled={isProcessing} style={{ minWidth: '120px' }}>\r\n                        <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdateCompanions ","import React, { useState, useEffect, useCallback } from 'react'\r\nimport Swal from \"sweetalert2\"\r\nimport { useProfile } from '../../../../context/profile'\r\nimport { useAuth } from '../../../../context/auth'\r\nimport { CompanionsContext } from '../../../../context/companions'\r\nimport API from '../../../../Api'\r\n\r\nimport { Container, Row, Col, ListGroup, ListGroupItem } from 'reactstrap'\r\nimport { Button, Tooltip, Paper } from '@material-ui/core'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArchive, faEdit, faPlus, faUsers } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport NewCompanions from '../../Modals/NewCompanions'\r\nimport UpdateCompanions from '../../Modals/UpdateCompanions'\r\nimport LinearProgressBarWithLabel from '../../Common/LinearProgressBarWithLabel'\r\n\r\n\r\nconst Companions = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n    const [companions, setCompanions] = useState([])\r\n    const [selectedCompanions, setSelectedCompanions] = useState({})\r\n\r\n    const [isShowCompanionsModal, setIsShowCompanionsModal] = useState(false)\r\n    const toggleIsShowCompanionsModal = () => setIsShowCompanionsModal(!isShowCompanionsModal)\r\n\r\n    const [isShowUpdateCompanionsModal, setIsShowUpdateCompanionsModal] = useState(false)\r\n    const toggleIsShowUpdateCompanionsModal = () => setIsShowUpdateCompanionsModal(!isShowUpdateCompanionsModal)\r\n\r\n    const loadCompanions = useCallback(() => {\r\n        setIsProcessing(true)\r\n        API.get(`companion/companions/${selectedProfile.event_id}/${selectedProfile.profile_id}`, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            setIsProcessing(false)\r\n            setCompanions(formatData(result))\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n        })\r\n    }, [])\r\n\r\n    const formatData = (result) => {\r\n        if (result !== null && result.data.length > 0) {\r\n            return result.data.map((companions) => {\r\n                let companionsList = [\r\n                    companions.id,\r\n                    companions.name,\r\n                    companions.relationship || \"N/A\",\r\n                    companions.contact || \"N/A\",\r\n                    companions.address || \"N/A\",\r\n                    companions\r\n                ]\r\n\r\n                return companionsList\r\n            })\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const updateCompanions = (data) => {\r\n        setSelectedCompanions(data)\r\n        toggleIsShowUpdateCompanionsModal()\r\n    }\r\n\r\n    const archiveCompanions = (id) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be able to revert this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes'\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                API.delete(`companion/delete/${id}`, {\r\n                    headers: {\r\n                        'Authorization': 'bearer ' + token.access_token\r\n                    }\r\n                }).then(result => {\r\n                    if (result.data.status) {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'success'\r\n                        )\r\n                        loadCompanions()\r\n                    } else {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'error'\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCompanions()\r\n    }, [])\r\n\r\n    return (\r\n        <CompanionsContext.Provider value={{ selectedCompanions }}>\r\n            <Container fluid>\r\n                <Paper className=\"p-3 mt-3\">\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <h6 className=\"float-left\">Companions List</h6>\r\n                            <Button onClick={toggleIsShowCompanionsModal} className=\"float-right m-0 p-0 pl-1 pr-1\" style={{ minWidth: \"0px\" }} variant=\"outlined\" color=\"primary\" size=\"small\">\r\n                                <FontAwesomeIcon icon={faPlus} className=\"mr-1\" />\r\n                                New Companion\r\n                            </Button>\r\n                        </Col>\r\n                        <Col md={12}>\r\n                            <ListGroup style={{ overflow: \"auto\", overflowX: \"auto\", maxHeight: \"200px\" }}>\r\n                                {companions.length > 0 &&\r\n                                    companions.map((cmp, index) => {\r\n                                        return <ListGroupItem key={index}>\r\n                                            <FontAwesomeIcon icon={faUsers} className=\"text-primary mr-1\" />\r\n                                            {`${cmp[1]} - ${cmp[2]} - ${cmp[3]}`}\r\n                                            <Tooltip title=\"Archive Companion\" placement=\"top\">\r\n                                                <Button className=\"float-right text-danger\" style={{ minWidth: \"0px\" }} onClick={() => archiveCompanions(cmp[0])}>\r\n                                                    <FontAwesomeIcon icon={faArchive} />\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                            <Tooltip title=\"Update Companion\" placement=\"top\">\r\n                                                <Button className=\"float-right text-primary\" style={{ minWidth: \"0px\" }} onClick={() => updateCompanions(cmp)}>\r\n                                                    <FontAwesomeIcon icon={faEdit} />\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                        </ListGroupItem>\r\n                                    })\r\n                                }\r\n                                {\r\n                                    isProcessing &&\r\n                                    <ListGroupItem>\r\n                                        <LinearProgressBarWithLabel title=\"Loading records\" />\r\n                                    </ListGroupItem>\r\n                                }\r\n                                {\r\n                                    (companions.length === 0 && !isProcessing) &&\r\n                                    <ListGroupItem className=\"text-center\">No Data to Display</ListGroupItem>\r\n                                }\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Paper>\r\n\r\n                {isShowCompanionsModal &&\r\n                    <NewCompanions isOpen={isShowCompanionsModal} toggle={toggleIsShowCompanionsModal} loadCompanions={loadCompanions} />\r\n                }\r\n\r\n                {isShowUpdateCompanionsModal &&\r\n                    <UpdateCompanions isOpen={isShowUpdateCompanionsModal} toggle={toggleIsShowUpdateCompanionsModal} loadCompanions={loadCompanions} />\r\n                }\r\n            </Container>\r\n        </CompanionsContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Companions ","import { createContext, useContext } from 'react' \r\n\r\nexport const TransportationsContext = createContext() \r\n\r\nexport function useTransportations() {\r\n  return useContext(TransportationsContext) \r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useTransportations } from '../../../context/transportations'\r\n\r\nimport { TextField } from '@material-ui/core'\r\nimport { Container, Row, Col } from 'reactstrap'\r\n\r\nconst TransportationForm = (props) => {\r\n\r\n    const selectedTransportations = useTransportations().selectedTransportations\r\n    const [vehicle, setVehicle] = useState(selectedTransportations[1] || \"\")\r\n    const [plateNumber, setPlateNumber] = useState(selectedTransportations[2] || \"\")\r\n    const [driver, setDriver] = useState(selectedTransportations[3] || \"\")\r\n    const [relationship, setRelationship] = useState(selectedTransportations[4] || \"\")\r\n    const [contact, setContact] = useState(selectedTransportations[5] || \"\")\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row className=\"m-0 p-0\">\r\n                <Col md={6}> \r\n                    <TextField\r\n                        value={vehicle}\r\n                        onChange={(e) => setVehicle(e.target.value)}\r\n                        name=\"vehicle\"\r\n                        label=\"Vehicle Description\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n                <Col md={6}>\r\n                    <TextField\r\n                        value={plateNumber}\r\n                        onChange={(e) => setPlateNumber(e.target.value)}\r\n                        name=\"plateNumber\"\r\n                        label=\"Plate Number\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"m-0 p-0 mt-2\">\r\n                <Col md={6}>\r\n                    <TextField\r\n                        value={driver}\r\n                        onChange={(e) => setDriver(e.target.value)}\r\n                        name=\"driver\"\r\n                        label=\"Driver\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n                <Col md={6}>\r\n                    <TextField\r\n                        value={relationship}\r\n                        onChange={(e) => setRelationship(e.target.value)}\r\n                        name=\"relationship\"\r\n                        label=\"Relationship\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"m-0 p-0 mt-2\">\r\n                <Col md={6}>\r\n                    <TextField\r\n                        value={contact}\r\n                        onChange={(e) => setContact(e.target.value)}\r\n                        name=\"contact\"\r\n                        label=\"Contact\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default TransportationForm\r\n","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport API from '../../../Api'\r\nimport { useAuth } from \"../../../context/auth\"\r\nimport { useProfile } from '../../../context/profile'\r\nimport { TransportationsContext } from '../../../context/transportations'\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faUser, faInfoCircle, faCar } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\nimport TransportationForm from '../Forms/TransportationForm'\r\n\r\nconst NewTransportations = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const [selectedTransportations, setSelectedTransportations] = useState([])\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveNewTransportations = () => {\r\n\r\n        let vehicle = document.querySelector(\"input[name=vehicle]\").value\r\n        let plateNumber = document.querySelector(\"input[name=plateNumber]\").value\r\n        let driver = document.querySelector(\"input[name=driver]\").value\r\n        let relationship = document.querySelector(\"input[name=relationship]\").value\r\n        let contact = document.querySelector(\"input[name=contact]\").value\r\n\r\n        setIsProcessing(true)\r\n\r\n        let data = {\r\n            \"profile_id\": selectedProfile.profile_id,\r\n            \"event_id\": selectedProfile.event_id,\r\n            \"vehicle\": vehicle,\r\n            \"plate_no\": plateNumber,\r\n            \"driver\": driver,\r\n            \"relationship\": relationship,\r\n            \"contact\": contact\r\n        }\r\n\r\n\r\n        API.post('transportation/store', data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token,\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n\r\n                if (props.loadTransportations !== null) {\r\n                    props.loadTransportations()\r\n                }\r\n\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <TransportationsContext.Provider value={{ selectedTransportations }}>\r\n            <div>\r\n                <Modal backdrop={\"static\"} isOpen={props.isOpen} toggle={props.toggle} className=\"modal-lg\" style={{ marginLeft: props.modalMargin, marginTop: \"5%\" }}>\r\n                    <ModalHeader>\r\n                        <FontAwesomeIcon icon={faCar} className=\"mr-1\" />\r\n                    New Transportation <br />\r\n                        <small className=\"text-danger\">\r\n                            <FontAwesomeIcon icon={faInfoCircle} className=\"mr-1\" />\r\n                        Note: Fields with * are required fields\r\n                    </small>\r\n                    </ModalHeader>\r\n                    <ModalBody className=\"mt-0 pt-0\">\r\n                        <Row className=\"p-2 pt-0\">\r\n                            <Col md={12} className=\"text-center\">\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <Row className=\"m-0 p-0\">\r\n                                            <Col md={12} className=\"text-left m-0 p-0 ml-4 pl-2\">\r\n                                                <span>\r\n                                                    <b><FontAwesomeIcon icon={faUser} className=\"mr-1\" />Participant:</b>\r\n                                                    {` ${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                                </span>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"mt-1\">\r\n                                            <Col md={12}>\r\n                                                <TransportationForm />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            {isProcessing &&\r\n                                <Col md={12}>\r\n                                    <Paper className=\"p-2 m-2 mt-3\">\r\n                                        <LinearProgressBarWithLabel title=\"Adding new transport details\" />\r\n                                    </Paper>\r\n                                </Col>\r\n                            }\r\n                        </Row>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" onClick={saveNewTransportations} color=\"primary\" disabled={isProcessing} style={{ minWidth: \"120px\" }} className=\"mr-1\">\r\n                            <FontAwesomeIcon icon={faSave} /> Save\r\n                    </Button>\r\n                        <Button color=\"danger\" onClick={props.toggle} disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                    </Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        </TransportationsContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NewTransportations ","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport API from '../../../Api'\r\nimport { useAuth } from '../../../context/auth'\r\nimport { useProfile } from '../../../context/profile'\r\nimport { useTransportations } from '../../../context/transportations'\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faUser, faInfoCircle, faCar } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\nimport TransportationForm from '../Forms/TransportationForm'\r\n\r\nconst UpdateTransportations = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const selectedTransportations = useTransportations().selectedTransportations\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveUpdateTransportations = () => {\r\n\r\n        let vehicle = document.querySelector(\"input[name=vehicle]\").value\r\n        let plateNumber = document.querySelector(\"input[name=plateNumber]\").value\r\n        let driver = document.querySelector(\"input[name=driver]\").value\r\n        let relationship = document.querySelector(\"input[name=relationship]\").value\r\n        let contact = document.querySelector(\"input[name=contact]\").value\r\n\r\n        setIsProcessing(true)\r\n\r\n        let data = {\r\n            \"vehicle\": vehicle,\r\n            \"plate_no\": plateNumber,\r\n            \"driver\": driver,\r\n            \"relationship\": relationship,\r\n            \"contact\": contact\r\n        }\r\n\r\n\r\n        API.put(`transportation/update/${selectedTransportations[0]}`, data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token,\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n\r\n                props.loadTransportations()\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={'static'} isOpen={props.isOpen} toggle={props.toggle} className='modal-lg' style={{ marginLeft: props.modalMargin, marginTop: '5%' }}>\r\n                <ModalHeader>\r\n                    <FontAwesomeIcon icon={faCar} className='mr-1' />\r\n                    Update Transportation <br />\r\n                    <small className='text-danger'>\r\n                        <FontAwesomeIcon icon={faInfoCircle} className='mr-1' />\r\n                        Note: Fields with * are required fields\r\n                    </small>\r\n                </ModalHeader>\r\n                <ModalBody className='mt-0 pt-0'>\r\n                    <Row className='p-2 pt-0'>\r\n                        <Col md={12} className='text-center'>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <Row className='m-0 p-0'>\r\n                                        <Col md={12} className='text-left m-0 p-0 ml-4 pl-2'>\r\n                                            <span>\r\n                                                <b><FontAwesomeIcon icon={faUser} className='mr-1' />Participant:</b>\r\n                                                {` ${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                            </span>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className='mt-2'>\r\n                                        <Col md={12}>\r\n                                            <TransportationForm />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        {isProcessing &&\r\n                            <Col md={12}>\r\n                                <Paper className='p-2 m-2 mt-3'>\r\n                                    <LinearProgressBarWithLabel title='Updating transportation' />\r\n                                </Paper>\r\n                            </Col>\r\n                        }\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button type='submit' onClick={saveUpdateTransportations} color='primary' disabled={isProcessing} style={{ minWidth: '120px' }} className='mr-1'>\r\n                        <FontAwesomeIcon icon={faSave} /> Save\r\n                    </Button>\r\n                    <Button color='danger' onClick={props.toggle} disabled={isProcessing} style={{ minWidth: '120px' }}>\r\n                        <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdateTransportations ","import React, { useState, useEffect, useCallback } from 'react'\r\nimport Swal from \"sweetalert2\"\r\nimport { useProfile } from '../../../../context/profile'\r\nimport { useAuth } from '../../../../context/auth'\r\nimport { TransportationsContext } from '../../../../context/transportations'\r\nimport API from '../../../../Api'\r\n\r\nimport { Container, Row, Col, ListGroup, ListGroupItem } from 'reactstrap'\r\nimport { Button, Tooltip, Paper } from '@material-ui/core'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArchive, faEdit, faPlus, faCar } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport NewTransportations from '../../Modals/NewTransportations'\r\nimport UpdateTransportations from '../../Modals/UpdateTransportations'\r\nimport LinearProgressBarWithLabel from '../../Common/LinearProgressBarWithLabel'\r\n\r\n\r\nconst Transportations = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n    const [transportations, setTransportations] = useState([])\r\n    const [selectedTransportations, setSelectedTransportations] = useState({})\r\n\r\n    const [isShowTransportationsModal, setIsShowTransportationsModal] = useState(false)\r\n    const toggleIsShowTransportationsModal = () => setIsShowTransportationsModal(!isShowTransportationsModal)\r\n\r\n    const [isShowUpdateTransportationsModal, setIsShowUpdateTransportationsModal] = useState(false)\r\n    const toggleIsShowUpdateTransportationsModal = () => setIsShowUpdateTransportationsModal(!isShowUpdateTransportationsModal)\r\n\r\n    const loadTransportations = useCallback(() => {\r\n        setIsProcessing(true)\r\n        API.get(`transportation/profile/${selectedProfile.event_id}/${selectedProfile.profile_id}`, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            setIsProcessing(false)\r\n            setTransportations(formatData(result))\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n        })\r\n    }, [])\r\n\r\n    const formatData = (result) => {\r\n        if (result !== null && result.data.length > 0) {\r\n            return result.data.map((transportation) => {\r\n                let transportationList = [\r\n                    transportation.id,\r\n                    transportation.vehicle,\r\n                    transportation.plate_no,\r\n                    transportation.driver,\r\n                    transportation.relationship,\r\n                    transportation.contact,\r\n                    transportation,\r\n                ]\r\n\r\n                return transportationList\r\n            })\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const updateTransportations = (data) => {\r\n        setSelectedTransportations(data)\r\n        toggleIsShowUpdateTransportationsModal()\r\n    }\r\n\r\n    const archiveTransportations = (id) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be able to revert this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes'\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                API.delete(`transportation/delete/${id}`, {\r\n                    headers: {\r\n                        'Authorization': 'bearer ' + token.access_token\r\n                    }\r\n                }).then(result => {\r\n                    if (result.data.status) {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'success'\r\n                        )\r\n                        loadTransportations()\r\n                    } else {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'error'\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadTransportations()\r\n    }, [])\r\n\r\n    return (\r\n        <TransportationsContext.Provider value={{ selectedTransportations }}>\r\n            <Container fluid>\r\n                <Paper className=\"p-3 mt-3\">\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <h6 className=\"float-left\">Transportations List</h6>\r\n                            <Button onClick={toggleIsShowTransportationsModal} className=\"float-right m-0 p-0 pl-1 pr-1\" style={{ minWidth: \"0px\" }} variant=\"outlined\" color=\"primary\" size=\"small\">\r\n                                <FontAwesomeIcon icon={faPlus} className=\"mr-1\" />\r\n                                New Transportation\r\n                            </Button>\r\n                        </Col>\r\n                        <Col md={12}>\r\n                            <ListGroup style={{ overflow: \"auto\", overflowX: \"auto\", maxHeight: \"200px\" }}>\r\n                                {transportations.length > 0 &&\r\n                                    transportations.map((trans, index) => {\r\n                                        return <ListGroupItem key={index}>\r\n                                            <FontAwesomeIcon icon={faCar} className=\"text-primary mr-1\" />\r\n                                            <b>Vehicle:</b>{` ${trans[1]}`} / <b>Plate #:</b>{` ${trans[2]}`} / <b>Driver:</b>{` ${trans[3]}`}\r\n                                            <Tooltip title=\"Archive Transportation\" placement=\"top\">\r\n                                                <Button className=\"float-right text-danger\" style={{ minWidth: \"0px\" }} onClick={() => archiveTransportations(trans[0])}>\r\n                                                    <FontAwesomeIcon icon={faArchive} />\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                            <Tooltip title=\"Update Transportation\" placement=\"top\">\r\n                                                <Button className=\"float-right text-primary\" style={{ minWidth: \"0px\" }} onClick={() => updateTransportations(trans)}>\r\n                                                    <FontAwesomeIcon icon={faEdit} />\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                        </ListGroupItem>\r\n                                    })\r\n                                }\r\n                                {\r\n                                    isProcessing &&\r\n                                    <ListGroupItem>\r\n                                        <LinearProgressBarWithLabel title=\"Loading records\" />\r\n                                    </ListGroupItem>\r\n                                }\r\n                                {\r\n                                    (transportations.length === 0 && !isProcessing) &&\r\n                                    <ListGroupItem className=\"text-center\">No Data to Display</ListGroupItem>\r\n                                }\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Paper>\r\n\r\n                {isShowTransportationsModal &&\r\n                    <NewTransportations isOpen={isShowTransportationsModal} toggle={toggleIsShowTransportationsModal} loadTransportations={loadTransportations} />\r\n                }\r\n\r\n                {isShowUpdateTransportationsModal &&\r\n                    <UpdateTransportations isOpen={isShowUpdateTransportationsModal} toggle={toggleIsShowUpdateTransportationsModal} loadTransportations={loadTransportations} />\r\n                }\r\n            </Container>\r\n        </TransportationsContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Transportations ","import { createContext, useContext } from 'react' \r\n\r\nexport const QuarantineContext = createContext() \r\n\r\nexport function useQuarantine() {\r\n  return useContext(QuarantineContext) \r\n}","import React, { useState } from 'react'\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport { useQuarantine } from '../../../../context/quarantine'\r\n\r\nconst StartQuarantineDate = (props) => {\r\n    const selectedQuarantine = useQuarantine().selectedQuarantine\r\n    const [startQurantineDate, setStartQuarantineDate] = useState(selectedQuarantine[1] || null)\r\n\r\n    const changeHandler = (date) => {\r\n        setStartQuarantineDate(date)\r\n        if(props.startDateChangeHandler !== null){\r\n            props.startDateChangeHandler(date)\r\n        }        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                    value={startQurantineDate}\r\n                    onChange={(date, value) => changeHandler(date)}\r\n                    name=\"startQurantineDate\"\r\n                    label=\"Start of Quarantine Date\"\r\n                    format=\"MMM/d/yyyy\"\r\n                    required\r\n                    clearable\r\n                    hideTabs\r\n                    showTodayButton\r\n                    fullWidth\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StartQuarantineDate ","import React, { useState } from 'react'\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport { useQuarantine } from '../../../../context/quarantine'\r\n\r\nconst EndQuarantineDate = (props) => {\r\n    const selectedQuarantine = useQuarantine().selectedQuarantine\r\n    const [endQuarantineDate, setEndQuarantineDate] = useState(selectedQuarantine[2] || null)\r\n\r\n    return (\r\n        <div>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                    value={endQuarantineDate}\r\n                    onChange={(date, value) => setEndQuarantineDate(date)}\r\n                    name=\"endQuarantineDate\"\r\n                    label=\"End of Quarantine Date\"\r\n                    format=\"MMM/d/yyyy\"\r\n                    disabled={props.isStartSelected}\r\n                    minDate={props.minDate}\r\n                    required\r\n                    clearable\r\n                    hideTabs\r\n                    fullWidth\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EndQuarantineDate ","import React, { useState, useEffect } from 'react'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport { useQuarantine } from '../../../context/quarantine'\r\n\r\nimport { TextField, Tooltip } from '@material-ui/core'\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport StartQuarantineDate from './Fields/StartQuarantineDate'\r\nimport EndQuarantineDate from './Fields/EndQuarantineDate'\r\n\r\nconst QuarantineForm = (props) => {\r\n\r\n    const dateFns = new DateFnsUtils()\r\n    const selectedQuarantine = useQuarantine().selectedQuarantine\r\n    \r\n    const [monitoring, setMonitoring] = useState(selectedQuarantine[3] || \"\")\r\n\r\n    const [isStartSelected, setIsStartSelected] = useState(true)\r\n    const [minDate, setMinDate] = useState(null)\r\n\r\n    const startDateChangeHandler = (value) => {\r\n        if (value !== \"\") {\r\n            setMinDate(dateFns.addDays(new Date(value), 1))\r\n            setIsStartSelected(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row className=\"m-0 p-0\">\r\n                <Col md={6}>\r\n                    <StartQuarantineDate startDateChangeHandler={startDateChangeHandler} />\r\n                </Col>\r\n                <Col md={6}>\r\n                    <EndQuarantineDate minDate={minDate} isStartSelected={isStartSelected} />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"m-0 p-0 mt-3\">\r\n                <Col md={12}>\r\n                    <Tooltip title=\"Enter monitoring details\" placement=\"top\">\r\n                        <TextField\r\n                            value={monitoring}\r\n                            onChange={(e) => setMonitoring(e.target.value)}\r\n                            name=\"monitoring\"\r\n                            label=\"Monitoring\"\r\n                            placeholder=\"Monitoring\"\r\n                            multiline\r\n                            rows={2}\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            required\r\n                        />\r\n                    </Tooltip>\r\n                </Col>\r\n            </Row>\r\n        </Container >\r\n    )\r\n\r\n}\r\n\r\nexport default QuarantineForm\r\n","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport API from '../../../Api'\r\nimport { useAuth } from \"../../../context/auth\"\r\nimport { useProfile } from '../../../context/profile'\r\nimport { QuarantineContext } from '../../../context/quarantine'\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faUser, faInfoCircle, faHouseUser } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport QuarantineForm from '../Forms/QuarantineForm'\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst NewQuarantine = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const dateFns = new DateFnsUtils()\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const [selectedQuarantine, setSelectedQuarantine] = useState([])\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveNewQuarantine = () => {\r\n\r\n        let startDate = document.querySelector(\"input[name=startQurantineDate]\").value\r\n        let endDate = document.querySelector(\"input[name=endQuarantineDate]\").value\r\n        let monitoring = document.querySelector(\"textarea[name=monitoring]\").value\r\n        \r\n\r\n        setIsProcessing(true)\r\n\r\n        let data = {\r\n            \"profile_id\": selectedProfile.profile_id,\r\n            \"event_id\": selectedProfile.event_id,\r\n            \"start\": dateFns.format(new Date(startDate), \"Y-M-dd 00:00:00\"),\r\n            \"end\": dateFns.format(new Date(endDate), \"Y-M-dd 00:00:00\"),\r\n            \"monitoring\": monitoring\r\n        }\r\n\r\n\r\n        API.post('quarantine/store', data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token,\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n\r\n                if (props.loadQuarantine !== null) {\r\n                    props.loadQuarantine()\r\n                }\r\n\r\n                props.toggle()\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <QuarantineContext.Provider value={{ selectedQuarantine }}>\r\n            <div>\r\n                <Modal backdrop={\"static\"} isOpen={props.isOpen} toggle={props.toggle} className=\"modal-lg\" style={{ marginLeft: props.modalMargin, marginTop: \"5%\" }}>\r\n                    <ModalHeader>\r\n                        <FontAwesomeIcon icon={faHouseUser} className=\"mr-1\" />\r\n                        New Quarantine Details <br />\r\n                        <small className=\"text-danger\">\r\n                            <FontAwesomeIcon icon={faInfoCircle} className=\"mr-1\" />\r\n                            Note: Fields with * are required fields\r\n                        </small>\r\n                    </ModalHeader>\r\n                    <ModalBody className=\"mt-0 pt-0\">\r\n                        <Row className=\"p-2 pt-0\">\r\n                            <Col md={12} className=\"text-center\">\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <Row className=\"m-0 p-0\">\r\n                                            <Col md={12} className=\"text-left m-0 p-0 ml-4 pl-2\">\r\n                                                <span>\r\n                                                    <b><FontAwesomeIcon icon={faUser} className=\"mr-1\" />Participant:</b>\r\n                                                    {` ${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                                </span>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"mt-1\">\r\n                                            <Col md={12}>\r\n                                                <QuarantineForm />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            {isProcessing &&\r\n                                <Col md={12}>\r\n                                    <Paper className=\"p-2 m-2 mt-3\">\r\n                                        <LinearProgressBarWithLabel title=\"Adding new quarantine details\" />\r\n                                    </Paper>\r\n                                </Col>\r\n                            }\r\n                        </Row>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" onClick={saveNewQuarantine} color=\"primary\" disabled={isProcessing} style={{ minWidth: \"120px\" }} className=\"mr-1\">\r\n                            <FontAwesomeIcon icon={faSave} /> Save\r\n                    </Button>\r\n                        <Button color=\"danger\" onClick={props.toggle} disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                    </Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        </QuarantineContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NewQuarantine ","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport API from '../../../Api'\r\nimport { useAuth } from '../../../context/auth'\r\nimport { useProfile } from '../../../context/profile'\r\nimport { useQuarantine } from '../../../context/quarantine'\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faUser, faInfoCircle,  faHouseUser } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport QuarantineForm from '../Forms/QuarantineForm'\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst UpdateQuarantine = (props) => {\r\n\r\n    const dateFns = new DateFnsUtils()\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const selectedQuarantine = useQuarantine().selectedQuarantine\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveUpdateQuarantine = () => {\r\n\r\n        let startDate = document.querySelector(\"input[name=startQurantineDate]\").value\r\n        let endDate = document.querySelector(\"input[name=endQuarantineDate]\").value\r\n        let monitoring = document.querySelector(\"textarea[name=monitoring]\").value\r\n        \r\n\r\n        setIsProcessing(true)\r\n\r\n        let data = {\r\n            \"start\": dateFns.format(new Date(startDate), \"Y-M-dd 00:00:00\"),\r\n            \"end\": dateFns.format(new Date(endDate), \"Y-M-dd 00:00:00\"),\r\n            \"monitoring\": monitoring\r\n        }\r\n\r\n\r\n        API.put(`quarantine/update/${selectedQuarantine[0]}`, data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token,\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n\r\n                props.loadQuarantine()\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={'static'} isOpen={props.isOpen} toggle={props.toggle} className='modal-lg' style={{ marginLeft: props.modalMargin, marginTop: '5%' }}>\r\n                <ModalHeader>\r\n                    <FontAwesomeIcon icon={faHouseUser} className='mr-1' />\r\n                    Update Quarantine Details <br />\r\n                    <small className='text-danger'>\r\n                        <FontAwesomeIcon icon={faInfoCircle} className='mr-1' />\r\n                        Note: Fields with * are required fields\r\n                    </small>\r\n                </ModalHeader>\r\n                <ModalBody className='mt-0 pt-0'>\r\n                    <Row className='p-2 pt-0'>\r\n                        <Col md={12} className='text-center'>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <Row className='m-0 p-0'>\r\n                                        <Col md={12} className='text-left m-0 p-0 ml-4 pl-2'>\r\n                                            <span>\r\n                                                <b><FontAwesomeIcon icon={faUser} className='mr-1' />Participant:</b>\r\n                                                {` ${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                            </span>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className='mt-2'>\r\n                                        <Col md={12}>\r\n                                           <QuarantineForm />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        {isProcessing &&\r\n                            <Col md={12}>\r\n                                <Paper className='p-2 m-2 mt-3'>\r\n                                    <LinearProgressBarWithLabel title='Updating quarantine details' />\r\n                                </Paper>\r\n                            </Col>\r\n                        }\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button type='submit' onClick={saveUpdateQuarantine} color='primary' disabled={isProcessing} style={{ minWidth: '120px' }} className='mr-1'>\r\n                        <FontAwesomeIcon icon={faSave} /> Save\r\n                    </Button>\r\n                    <Button color='danger' onClick={props.toggle} disabled={isProcessing} style={{ minWidth: '120px' }}>\r\n                        <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdateQuarantine ","import React, { useState, useEffect, useCallback } from 'react'\r\nimport Swal from \"sweetalert2\"\r\nimport { useProfile } from '../../../../context/profile'\r\nimport { useAuth } from '../../../../context/auth'\r\nimport { QuarantineContext } from '../../../../context/quarantine'\r\nimport API from '../../../../Api'\r\n\r\nimport { Container, Row, Col, ListGroup, ListGroupItem } from 'reactstrap'\r\nimport { Button, Tooltip, Paper } from '@material-ui/core'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArchive, faEdit, faPlus, faHouseUser } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport NewQuarantine from '../../Modals/NewQuarantine'\r\nimport UpdateQuarantine from '../../Modals/UpdateQuarantine'\r\nimport LinearProgressBarWithLabel from '../../Common/LinearProgressBarWithLabel'\r\n\r\n\r\nconst Quarantine = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n    const [quarantine, setQuarantine] = useState([])\r\n    const [selectedQuarantine, setSelectedQuarantine] = useState({})\r\n\r\n    const [isShowQuarantineModal, setIsShowQuarantineModal] = useState(false)\r\n    const toggleIsShowQuarantineModal = () => setIsShowQuarantineModal(!isShowQuarantineModal)\r\n\r\n    const [isShowUpdateQuarantineModal, setIsShowUpdateQuarantineModal] = useState(false)\r\n    const toggleIsShowUpdateQuarantineModal = () => setIsShowUpdateQuarantineModal(!isShowUpdateQuarantineModal)\r\n\r\n    const loadQuarantine = useCallback(() => {\r\n        setIsProcessing(true)\r\n        API.get(`quarantine/profile/${selectedProfile.profile_id}`, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            setIsProcessing(false)\r\n            setQuarantine(formatData(result))\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n        })\r\n    }, [])\r\n\r\n    const formatData = (result) => {\r\n        if (result !== null && result.data.length > 0) {\r\n            return result.data.map((quarantine) => {\r\n                let quarantineList = [\r\n                    quarantine.id,\r\n                    quarantine.start,\r\n                    quarantine.end,\r\n                    quarantine.monitoring,\r\n                    quarantine,\r\n                ]\r\n\r\n                return quarantineList\r\n            })\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const updateQuarantine = (data) => {\r\n        setSelectedQuarantine(data)\r\n        toggleIsShowUpdateQuarantineModal()\r\n    }\r\n\r\n    const archiveQuarantine = (id) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be able to revert this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes'\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                API.delete(`quarantine/delete/${id}`, {\r\n                    headers: {\r\n                        'Authorization': 'bearer ' + token.access_token\r\n                    }\r\n                }).then(result => {\r\n                    if (result.data.status) {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'success'\r\n                        )\r\n                        loadQuarantine()\r\n                    } else {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'error'\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadQuarantine()\r\n    }, [])\r\n\r\n    return (\r\n        <QuarantineContext.Provider value={{ selectedQuarantine }}>\r\n            <Container fluid>\r\n                <Paper className=\"p-3 mt-3\">\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <h6 className=\"float-left\">Quarantine Details List</h6>\r\n                            <Button onClick={toggleIsShowQuarantineModal} className=\"float-right m-0 p-0 pl-1 pr-1\" style={{ minWidth: \"0px\" }} variant=\"outlined\" color=\"primary\" size=\"small\">\r\n                                <FontAwesomeIcon icon={faPlus} className=\"mr-1\" />\r\n                                New Detail\r\n                            </Button>\r\n                        </Col>\r\n                        <Col md={12}>\r\n                            <ListGroup style={{ overflow: \"auto\", overflowX: \"auto\", maxHeight: \"200px\" }}>\r\n                                {quarantine.length > 0 &&\r\n                                    quarantine.map((quar, index) => {\r\n                                        return <ListGroupItem key={index}>\r\n                                            <FontAwesomeIcon icon={faHouseUser} className=\"text-primary mr-1\" />\r\n                                            <b>Start:</b>{` ${quar[1]}`} / <b>End:</b>{` ${quar[2]}`} / <b>Monitoring:</b>{` ${quar[3]}`}\r\n                                            <Tooltip title=\"Archive Quarantine Details\" placement=\"top\">\r\n                                                <Button className=\"float-right text-danger\" style={{ minWidth: \"0px\" }} onClick={() => archiveQuarantine(quar[0])}>\r\n                                                    <FontAwesomeIcon icon={faArchive} />\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                            <Tooltip title=\"Update Quarantine Details\" placement=\"top\">\r\n                                                <Button className=\"float-right text-primary\" style={{ minWidth: \"0px\" }} onClick={() => updateQuarantine(quar)}>\r\n                                                    <FontAwesomeIcon icon={faEdit} />\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                        </ListGroupItem>\r\n                                    })\r\n                                }\r\n                                {\r\n                                    isProcessing &&\r\n                                    <ListGroupItem>\r\n                                        <LinearProgressBarWithLabel title=\"Loading records\" />\r\n                                    </ListGroupItem>\r\n                                }\r\n                                {\r\n                                    (quarantine.length === 0 && !isProcessing) &&\r\n                                    <ListGroupItem className=\"text-center\">No Data to Display</ListGroupItem>\r\n                                }\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Paper>\r\n\r\n                {isShowQuarantineModal &&\r\n                    <NewQuarantine isOpen={isShowQuarantineModal} toggle={toggleIsShowQuarantineModal} loadQuarantine={loadQuarantine} />\r\n                }\r\n\r\n                {isShowUpdateQuarantineModal &&\r\n                    <UpdateQuarantine isOpen={isShowUpdateQuarantineModal} toggle={toggleIsShowUpdateQuarantineModal} loadQuarantine={loadQuarantine} />\r\n                }\r\n            </Container>\r\n        </QuarantineContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Quarantine ","import { createContext, useContext } from 'react' \r\n\r\nexport const MedicalConditionContext = createContext() \r\n\r\nexport function useMedicalCondition() {\r\n  return useContext(MedicalConditionContext) \r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useMedicalCondition } from '../../../context/medicalCondition'\r\n\r\nimport { TextField, Tooltip } from '@material-ui/core'\r\nimport { Container, Row, Col } from 'reactstrap'\r\n\r\nconst MedicalConditionForm = (props) => {\r\n\r\n    const selectedMedicalCondition = useMedicalCondition().selectedMedicalCondition\r\n    \r\n    const [medicalConditions, setMedicalConditions] = useState(selectedMedicalCondition[1] || \"\")\r\n\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row className=\"m-0 p-0\">\r\n                <Col md={12}>\r\n                <Tooltip title=\"Enter Medical Conditions Details\" placement=\"top\">\r\n                        <TextField\r\n                            value={medicalConditions}\r\n                            onChange={(e) => setMedicalConditions(e.target.value)}\r\n                            name=\"medicalConditions\"\r\n                            label=\"Medical Condition\"\r\n                            placeholder=\"Medical Condition\"\r\n                            multiline\r\n                            rows={2}\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            required\r\n                        />\r\n                    </Tooltip>\r\n                </Col>               \r\n            </Row>\r\n        </Container >\r\n    )\r\n\r\n}\r\n\r\nexport default MedicalConditionForm\r\n","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport API from '../../../Api'\r\nimport { useAuth } from \"../../../context/auth\"\r\nimport { useProfile } from '../../../context/profile'\r\nimport { MedicalConditionContext } from '../../../context/medicalCondition'\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faUser, faInfoCircle, faBookMedical } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport MedicalConditionForm from '../Forms/MedicalConditionForm'\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst NewMedicalCondition = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const [selectedMedicalCondition, setSelectedQuarantine] = useState([])\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveNewMedicalCondition = () => {\r\n\r\n        let medicalConditions = document.querySelector(\"textarea[name=medicalConditions]\").value\r\n\r\n\r\n        setIsProcessing(true)\r\n\r\n        let data = {\r\n            \"medical_conditions\": {\"conditions\": medicalConditions}\r\n        }\r\n\r\n\r\n        API.put(`health-conditions/store/${selectedProfile.profile_id}`, data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token,\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n\r\n                if (props.loadMedicalCondition !== null) {\r\n                    props.loadMedicalCondition()\r\n                }\r\n\r\n                props.toggle()\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <MedicalConditionContext.Provider value={{ selectedMedicalCondition }}>\r\n            <div>\r\n                <Modal backdrop={\"static\"} isOpen={props.isOpen} toggle={props.toggle} className=\"modal-lg\" style={{ marginLeft: props.modalMargin, marginTop: \"5%\" }}>\r\n                    <ModalHeader>\r\n                        <FontAwesomeIcon icon={faBookMedical} className=\"mr-1\" />\r\n                        New Medical Condition Details <br />\r\n                        <small className=\"text-danger\">\r\n                            <FontAwesomeIcon icon={faInfoCircle} className=\"mr-1\" />\r\n                            Note: Fields with * are required fields\r\n                        </small>\r\n                    </ModalHeader>\r\n                    <ModalBody className=\"mt-0 pt-0\">\r\n                        <Row className=\"p-2 pt-0\">\r\n                            <Col md={12} className=\"text-center\">\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <Row className=\"m-0 p-0\">\r\n                                            <Col md={12} className=\"text-left m-0 p-0 ml-4 pl-2\">\r\n                                                <span>\r\n                                                    <b><FontAwesomeIcon icon={faUser} className=\"mr-1\" />Participant:</b>\r\n                                                    {` ${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                                </span>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"mt-1\">\r\n                                            <Col md={12}>\r\n                                                <MedicalConditionForm />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            {isProcessing &&\r\n                                <Col md={12}>\r\n                                    <Paper className=\"p-2 m-2 mt-3\">\r\n                                        <LinearProgressBarWithLabel title=\"Adding new medical condition details\" />\r\n                                    </Paper>\r\n                                </Col>\r\n                            }\r\n                        </Row>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" onClick={saveNewMedicalCondition} color=\"primary\" disabled={isProcessing} style={{ minWidth: \"120px\" }} className=\"mr-1\">\r\n                            <FontAwesomeIcon icon={faSave} /> Save\r\n                    </Button>\r\n                        <Button color=\"danger\" onClick={props.toggle} disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                    </Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        </MedicalConditionContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NewMedicalCondition ","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport API from '../../../Api'\r\nimport { useAuth } from '../../../context/auth'\r\nimport { useProfile } from '../../../context/profile'\r\nimport { useMedicalCondition } from '../../../context/medicalCondition'\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faUser, faInfoCircle, faBookMedical } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport MedicalConditionForm from '../Forms/MedicalConditionForm'\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst UpdateMedicalCondition = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const selectedMedicalCondition = useMedicalCondition().selectedMedicalCondition\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveUpdateMedicalCondition = () => {\r\n\r\n        let medicalConditions = document.querySelector(\"textarea[name=medicalConditions]\").value\r\n\r\n\r\n        setIsProcessing(true)\r\n\r\n        let data = {\r\n            \"medical_conditions\": {\"conditions\": medicalConditions}\r\n        }\r\n\r\n\r\n        API.put(`health-conditions/update/${selectedMedicalCondition[0]}`, data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token,\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n\r\n                props.loadMedicalCondition()\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={'static'} isOpen={props.isOpen} toggle={props.toggle} className='modal-lg' style={{ marginLeft: props.modalMargin, marginTop: '5%' }}>\r\n                <ModalHeader>\r\n                    <FontAwesomeIcon icon={faBookMedical} className='mr-1' />\r\n                    Update Medical Condition Details <br />\r\n                    <small className='text-danger'>\r\n                        <FontAwesomeIcon icon={faInfoCircle} className='mr-1' />\r\n                        Note: Fields with * are required fields\r\n                    </small>\r\n                </ModalHeader>\r\n                <ModalBody className='mt-0 pt-0'>\r\n                    <Row className='p-2 pt-0'>\r\n                        <Col md={12} className='text-center'>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <Row className='m-0 p-0'>\r\n                                        <Col md={12} className='text-left m-0 p-0 ml-4 pl-2'>\r\n                                            <span>\r\n                                                <b><FontAwesomeIcon icon={faUser} className='mr-1' />Participant:</b>\r\n                                                {` ${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                            </span>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className='mt-2'>\r\n                                        <Col md={12}>\r\n                                            <MedicalConditionForm />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        {isProcessing &&\r\n                            <Col md={12}>\r\n                                <Paper className='p-2 m-2 mt-3'>\r\n                                    <LinearProgressBarWithLabel title='Updating medical condition details' />\r\n                                </Paper>\r\n                            </Col>\r\n                        }\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button type='submit' onClick={saveUpdateMedicalCondition} color='primary' disabled={isProcessing} style={{ minWidth: '120px' }} className='mr-1'>\r\n                        <FontAwesomeIcon icon={faSave} /> Save\r\n                    </Button>\r\n                    <Button color='danger' onClick={props.toggle} disabled={isProcessing} style={{ minWidth: '120px' }}>\r\n                        <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdateMedicalCondition ","import React, { useState, useEffect, useCallback } from 'react'\r\nimport Swal from \"sweetalert2\"\r\nimport { useProfile } from '../../../../context/profile'\r\nimport { useAuth } from '../../../../context/auth'\r\nimport { MedicalConditionContext } from '../../../../context/medicalCondition'\r\nimport API from '../../../../Api'\r\n\r\nimport { Container, Row, Col, ListGroup, ListGroupItem } from 'reactstrap'\r\nimport { Button, Tooltip, Paper } from '@material-ui/core'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArchive, faEdit, faPlus, faBookMedical } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport NewMedicalCondition from '../../Modals/NewMedicalCondition'\r\nimport UpdateMedicalCondition from '../../Modals/UpdateMedicalCondition'\r\nimport LinearProgressBarWithLabel from '../../Common/LinearProgressBarWithLabel'\r\n\r\n\r\nconst MedicalCondition = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n    const [medicalCondition, setMedicalCondition] = useState([])\r\n    const [selectedMedicalCondition, setSelectedMedicalCondition] = useState({})\r\n\r\n    const [isShowMedicalConditionModal, setIsShowMedicalConditionModal] = useState(false)\r\n    const toggleIsShowMedicalConditionModal = () => setIsShowMedicalConditionModal(!isShowMedicalConditionModal)\r\n\r\n    const [isShowUpdateMedicalConditionModal, setIsShowUpdateMedicalConditionModal] = useState(false)\r\n    const toggleIsShowUpdateMedicalConditionModal = () => setIsShowUpdateMedicalConditionModal(!isShowUpdateMedicalConditionModal)\r\n\r\n    const loadMedicalCondition = useCallback(() => {\r\n        setIsProcessing(true)\r\n        API.get(`health-conditions/profile/${selectedProfile.profile_id}`, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            setIsProcessing(false)\r\n            setMedicalCondition(formatData(result))\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n        })\r\n    }, [])\r\n\r\n    const formatData = (result) => {\r\n        if (result !== null && result.data.length > 0) {\r\n            return result.data.map((medicalCondition) => {\r\n                let medicalConditionList = [\r\n                    medicalCondition.id,\r\n                    JSON.parse(medicalCondition.medical_conditions).conditions,\r\n                    medicalCondition,\r\n                ]\r\n\r\n                return medicalConditionList\r\n            })\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    const updateMedicalCondition = (data) => {\r\n        setSelectedMedicalCondition(data)\r\n        toggleIsShowUpdateMedicalConditionModal()\r\n    }\r\n\r\n    const archiveMedicalCondition = (id) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be able to revert this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes'\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                API.delete(`health-conditions/delete/${id}`, {\r\n                    headers: {\r\n                        'Authorization': 'bearer ' + token.access_token\r\n                    }\r\n                }).then(result => {\r\n                    if (result.data.status) {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'success'\r\n                        )\r\n                        loadMedicalCondition()\r\n                    } else {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'error'\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadMedicalCondition()\r\n    }, [])\r\n\r\n    return (\r\n        <MedicalConditionContext.Provider value={{ selectedMedicalCondition }}>\r\n            <Container fluid>\r\n                <Paper className=\"p-3 mt-3\">\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <h6 className=\"float-left\">Medical Conditions List</h6>\r\n                            <Button onClick={toggleIsShowMedicalConditionModal} className=\"float-right m-0 p-0 pl-1 pr-1\" style={{ minWidth: \"0px\" }} variant=\"outlined\" color=\"primary\" size=\"small\">\r\n                                <FontAwesomeIcon icon={faPlus} className=\"mr-1\" />\r\n                                New Detail\r\n                            </Button>\r\n                        </Col>\r\n                        <Col md={12}>\r\n                            <ListGroup style={{ overflow: \"auto\", overflowX: \"auto\", maxHeight: \"200px\" }}>\r\n                                {medicalCondition.length > 0 &&\r\n                                    medicalCondition.map((med, index) => {\r\n                                        return <ListGroupItem key={index}>\r\n                                            <FontAwesomeIcon icon={faBookMedical} className=\"text-primary mr-1\" />\r\n                                            <b>Medical Condition:</b>{` ${med[1]}`}\r\n                                            <Tooltip title=\"Archive Medical Condition Details\" placement=\"top\">\r\n                                                <Button className=\"float-right text-danger\" style={{ minWidth: \"0px\" }} onClick={() => archiveMedicalCondition(med[0])}>\r\n                                                    <FontAwesomeIcon icon={faArchive} />\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                            <Tooltip title=\"Update Medical Condition Details\" placement=\"top\">\r\n                                                <Button className=\"float-right text-primary\" style={{ minWidth: \"0px\" }} onClick={() => updateMedicalCondition(med)}>\r\n                                                    <FontAwesomeIcon icon={faEdit} />\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                        </ListGroupItem>\r\n                                    })\r\n                                }\r\n                                {\r\n                                    isProcessing &&\r\n                                    <ListGroupItem>\r\n                                        <LinearProgressBarWithLabel title=\"Loading records\" />\r\n                                    </ListGroupItem>\r\n                                }\r\n                                {\r\n                                    (medicalCondition.length === 0 && !isProcessing) &&\r\n                                    <ListGroupItem className=\"text-center\">No Data to Display</ListGroupItem>\r\n                                }\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Paper>\r\n\r\n                {isShowMedicalConditionModal &&\r\n                    <NewMedicalCondition isOpen={isShowMedicalConditionModal} toggle={toggleIsShowMedicalConditionModal} loadMedicalCondition={loadMedicalCondition} />\r\n                }\r\n\r\n                {isShowUpdateMedicalConditionModal &&\r\n                    <UpdateMedicalCondition isOpen={isShowUpdateMedicalConditionModal} toggle={toggleIsShowUpdateMedicalConditionModal} loadMedicalCondition={loadMedicalCondition} />\r\n                }\r\n            </Container>\r\n        </MedicalConditionContext.Provider>\r\n    )\r\n}\r\n\r\nexport default MedicalCondition ","import React, { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { Tabs, Tab, Box, Paper } from '@material-ui/core'\r\n\r\nimport AccountCircleRoundedIcon from '@material-ui/icons/AccountCircleRounded'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSyringe, faUsers, faCar, faHouseUser, faBookMedical, faDoorOpen, faCommentDots, faMapMarkedAlt, faSchool } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport Profile from '../Tabs/TabContent/Profile'\r\nimport Room from './TabContent/Room'\r\nimport Remarks from './TabContent/Remarks'\r\nimport Address from './TabContent/Address'\r\nimport School from './TabContent/School'\r\nimport Tests from './TabContent/Tests'\r\nimport Companions from './TabContent/Companions'\r\nimport Transportations from './TabContent/Transportations'\r\nimport Quarantine from './TabContent/Quarantine'\r\nimport MedicalCondition from './TabContent/MedicalCondition'\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-force-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-force-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    {children}\r\n                </Box>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    tabsHeader: {\r\n        width: 'auto',\r\n        float: 'left',\r\n        border: '1px solid #ccc'\r\n    },\r\n    tabPanel: {\r\n        height: 'auto',\r\n        minHeight: '250px',\r\n        maxHeight: '250px',\r\n        \"& > div\": {\r\n            padding: \"25px\",\r\n            paddingTop: \"0px\"\r\n        }\r\n    }\r\n}))\r\n\r\nexport default function ProfileTabs(props) {\r\n    const classes = useStyles()\r\n    const [value, setValue] = useState(0)\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue)\r\n        props.setActiveTab(newValue)\r\n    }\r\n\r\n    return (\r\n        <div className=\"m-1 pt-0 mt-0\">\r\n            <Tabs\r\n                variant=\"scrollable\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                scrollButtons=\"on\"\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n            >\r\n                <Tab label=\"Profile\" className={classes.tabsHeader} icon={<AccountCircleRoundedIcon />} />\r\n                <Tab label=\"Address\" className={classes.tabsHeader} icon={<FontAwesomeIcon icon={faMapMarkedAlt} size=\"lg\" />} />\r\n                <Tab label=\"Rooms\" className={classes.tabsHeader} icon={<FontAwesomeIcon icon={faDoorOpen} size=\"lg\" />} />\r\n                <Tab label=\"Remarks\" className={classes.tabsHeader} icon={<FontAwesomeIcon icon={faCommentDots} size=\"lg\" />} />\r\n                <Tab label=\"School\" className={classes.tabsHeader} icon={<FontAwesomeIcon icon={faSchool} size=\"lg\" />} />\r\n                <Tab label=\"Tests\" className={classes.tabsHeader} icon={<FontAwesomeIcon icon={faSyringe} size=\"lg\" />} />\r\n                <Tab label=\"Companions\" className={classes.tabsHeader} icon={<FontAwesomeIcon icon={faUsers} size=\"lg\" />} />\r\n                <Tab label=\"Transportations\" className={classes.tabsHeader} icon={<FontAwesomeIcon icon={faCar} size=\"lg\" />} />\r\n                <Tab label=\"Quarantine\" className={classes.tabsHeader} icon={<FontAwesomeIcon icon={faHouseUser} size=\"lg\" />} />\r\n                <Tab label=\"Medical Conditions\" className={classes.tabsHeader} icon={<FontAwesomeIcon icon={faBookMedical} size=\"lg\" />} />\r\n            </Tabs>\r\n            <TabPanel value={value} index={0} className={classes.tabPanel}>\r\n                <Profile />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1} className={classes.tabPanel}>\r\n                <Address />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={2} className={classes.tabPanel}>\r\n                <Room />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={3} className={classes.tabPanel}>\r\n                <Remarks />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={4} className={classes.tabPanel}>\r\n                <School />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={5} className={classes.tabPanel}>\r\n                <Tests />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={6} className={classes.tabPanel}>\r\n                <Companions />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={7} className={classes.tabPanel}>\r\n                <Transportations />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={8} className={classes.tabPanel}>\r\n                <Quarantine />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={9} className={classes.tabPanel}>\r\n                <MedicalCondition />\r\n            </TabPanel>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport API from '../../../Api'\r\nimport Swal from 'sweetalert2'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport { useAuth } from \"../../../context/auth\"\r\nimport { ProfileContext, useProfile } from \"../../../context/profile\"\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\nimport { Paper, Typography } from '@material-ui/core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faEdit, faUser, faUserEdit, faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport ProfileTabs from '../Tabs/ProfileTabs'\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst UpdateProfile = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const dateFns = new DateFnsUtils()\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n    const [processTitle, setProcessTitle] = useState(\"Processing\")\r\n    const [activeTab, setActiveTab] = useState(0)\r\n\r\n    const updateDataHandler = (e) => {\r\n        e.preventDefault()\r\n        switch (activeTab) {\r\n            case 0:\r\n                saveProfile()\r\n                break\r\n            case 1:\r\n                saveAddress()\r\n                break\r\n            case 4:\r\n                saveSchool()\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    const saveProfile = () => {\r\n\r\n        let data = {\r\n            \"first_name\": document.querySelector(\"input[name=first_name]\").value,\r\n            \"middle_name\": document.querySelector(\"input[name=middle_name]\").value,\r\n            \"last_name\": document.querySelector(\"input[name=last_name]\").value,\r\n            \"email\": document.querySelector(\"input[name=email]\").value,\r\n            \"mobile\": document.querySelector(\"input[name=mobile]\").value,\r\n            \"gender\": document.querySelector(\"input[name=gender]\").value,\r\n            \"dob\": dateFns.format(new Date(document.querySelector(\"input[name=dob]\").value), \"Y-M-dd 00:00:00\")\r\n        }\r\n        setProcessTitle(\"Updating Profile\")\r\n        setIsProcessing(true)\r\n        API.put(`store/update/profile/${selectedProfile.profile_id}`, data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n\r\n                selectedProfile.profile.first_name = data.first_name\r\n                selectedProfile.profile.middle_name = data.middle_name\r\n                selectedProfile.profile.last_name = data.last_name\r\n                selectedProfile.profile.dob = data.dob\r\n                selectedProfile.profile.gender = data.gender\r\n                selectedProfile.profile.mobile = data.mobile\r\n                selectedProfile.profile.email = data.email\r\n\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    const saveAddress = () => {\r\n\r\n        let data = {\r\n            \"address\": document.querySelector(\"input[name=specificAddress]\").value,\r\n            \"barangay\": document.querySelector(\"input[name=barangay]\").value,\r\n            \"zipcode\": document.querySelector(\"input[name=zipcode]\").value,\r\n            \"type\": \"Permanent\"\r\n        }\r\n\r\n        if (selectedProfile.profile.address != null) {\r\n            setProcessTitle(\"Updating Address\")\r\n            setIsProcessing(true)\r\n            API.put(`store/update/address/${selectedProfile.profile.address.id}`, data, {\r\n                headers: {\r\n                    'Authorization': 'bearer ' + token.access_token\r\n                }\r\n            }).then(result => {\r\n                if (result.data.status) {\r\n\r\n                    selectedProfile.profile.address.specific_address = data.address\r\n                    selectedProfile.profile.address.barangay = data.barangay\r\n                    selectedProfile.profile.address.zipcode = data.zipcode\r\n                    selectedProfile.profile.address.type = data.type\r\n\r\n                    setIsProcessing(false)\r\n                    Swal.fire(\r\n                        'Transaction Completed!',\r\n                        result.data.message,\r\n                        'success'\r\n                    )\r\n                } else {\r\n                    setIsProcessing(false)\r\n                    Swal.fire(\r\n                        'Transaction Failed!',\r\n                        result.data.message,\r\n                        'error'\r\n                    )\r\n                }\r\n            }).catch(e => {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    'Technical Error',\r\n                    'error'\r\n                )\r\n            })\r\n        } else {\r\n            setProcessTitle(\"Adding Address\")\r\n            setIsProcessing(true)\r\n            API.put(`store/address/${selectedProfile.profile_id}`, data, {\r\n                headers: {\r\n                    'Authorization': 'bearer ' + token.access_token\r\n                }\r\n            }).then(result => {\r\n                if (result.data.status) {\r\n\r\n                    let addressData = {\r\n                        \"id\": result.data.address_id,\r\n                        \"specific_address\": data.address,\r\n                        \"barangay\": data.barangay,\r\n                        \"zipcode\": data.zipcode,\r\n                        \"type\": data.type\r\n                    }\r\n\r\n                    selectedProfile.profile.address = addressData\r\n\r\n                    setIsProcessing(false)\r\n                    Swal.fire(\r\n                        'Transaction Completed!',\r\n                        result.data.message,\r\n                        'success'\r\n                    )\r\n                } else {\r\n                    setIsProcessing(false)\r\n                    Swal.fire(\r\n                        'Transaction Failed!',\r\n                        result.data.message,\r\n                        'error'\r\n                    )\r\n                }\r\n            }).catch(e => {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    'Technical Error',\r\n                    'error'\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n    const saveSchool = () => {\r\n\r\n        let data = {\r\n            \"school\": document.querySelector(\"input[name=school]\").value,\r\n        }\r\n\r\n        if (selectedProfile.profile.school != null) {\r\n            setProcessTitle(\"Updating School\")\r\n            setIsProcessing(true)\r\n            API.put(`school/update/${selectedProfile.profile.school.id}`, data, {\r\n                headers: {\r\n                    'Authorization': 'bearer ' + token.access_token\r\n                }\r\n            }).then(result => {\r\n                if (result.data.status) {\r\n\r\n                    selectedProfile.profile.school.school = data.school\r\n\r\n                    setIsProcessing(false)\r\n                    Swal.fire(\r\n                        'Transaction Completed!',\r\n                        result.data.message,\r\n                        'success'\r\n                    )\r\n                } else {\r\n                    setIsProcessing(false)\r\n                    Swal.fire(\r\n                        'Transaction Failed!',\r\n                        result.data.message,\r\n                        'error'\r\n                    )\r\n                }\r\n            }).catch(e => {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    'Technical Error',\r\n                    'error'\r\n                )\r\n            })\r\n        } else {\r\n            setProcessTitle(\"Adding School\")\r\n            setIsProcessing(true)\r\n            API.put(`school/store/${selectedProfile.profile_id}`, data, {\r\n                headers: {\r\n                    'Authorization': 'bearer ' + token.access_token\r\n                }\r\n            }).then(result => {\r\n                if (result.data.status) {\r\n\r\n                    let schoolData = {\r\n                        \"id\": result.data.school,\r\n                        \"school\": data.school,\r\n                    }\r\n\r\n                    selectedProfile.profile.school = schoolData\r\n\r\n                    setIsProcessing(false)\r\n                    Swal.fire(\r\n                        'Transaction Completed!',\r\n                        result.data.message,\r\n                        'success'\r\n                    )\r\n                } else {\r\n                    setIsProcessing(false)\r\n                    Swal.fire(\r\n                        'Transaction Failed!',\r\n                        result.data.message,\r\n                        'error'\r\n                    )\r\n                }\r\n            }).catch(e => {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    'Technical Error',\r\n                    'error'\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ProfileContext.Provider value={{ selectedProfile }}>\r\n            <div>\r\n                <Modal backdrop={\"static\"} isOpen={props.isOpen} toggle={props.toggle} className=\"modal-xl\" style={{ marginLeft: props.modalMargin, marginTop: \"5%\" }}>\r\n                    <form onSubmit={(e) => updateDataHandler(e)}>\r\n                        <ModalHeader>\r\n                            <FontAwesomeIcon icon={faUserEdit} className=\"mr-1\" />\r\n                        Profile Record <br />\r\n                        </ModalHeader>\r\n                        <ModalBody>\r\n                            <Row className=\"p-2 pt-0\">\r\n                                <div className=\"col-md-12\">\r\n                                    <Row>\r\n                                        <Col md={12} className=\"p-0 m-0 ml-2\">\r\n                                            <h6>\r\n                                                <FontAwesomeIcon icon={faUser} className=\"mr-1 ml-5\" />\r\n                                                {`${selectedProfile.profile.first_name.toUpperCase()} ${selectedProfile.profile.last_name.toUpperCase()}`}\r\n                                            </h6>\r\n                                        </Col>\r\n                                        <Col md={12} className=\"ml-0 mr-0 pl-0 pr-0\">\r\n                                            <ProfileTabs setActiveTab={setActiveTab} />\r\n                                        </Col>\r\n                                        <Col md={12}>\r\n                                            {isProcessing &&\r\n                                                <Col md={12}>\r\n                                                    <Paper className='p-1 pl-2 pr-2 m-0 ml-3 mr-3'>\r\n                                                        <LinearProgressBarWithLabel title={processTitle} />\r\n                                                    </Paper>\r\n                                                </Col>\r\n                                            }\r\n                                        </Col>\r\n                                    </Row>\r\n                                </div>\r\n                            </Row>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type=\"submit\" className=\"mr-1\" color=\"primary\" disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                                <FontAwesomeIcon icon={faSave} /> Save\r\n                        </Button>\r\n                            <Button color=\"danger\" onClick={props.toggle} disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                                <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                        </Button>\r\n                        </ModalFooter>\r\n                    </form>\r\n                </Modal>\r\n            </div>\r\n        </ProfileContext.Provider>\r\n    )\r\n}\r\n\r\nexport default UpdateProfile ","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport API from '../../../Api'\r\nimport { useAuth } from \"../../../context/auth\"\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faQrcode, faKey, faSms, faUser, faEnvelope, faInfoCircle, faMobileAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\nimport MUIButton from '@material-ui/core/Button'\r\n\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst SendInformation = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n\r\n    const [processTitle, setProcessTitle] = useState(\"Sending notification\")\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const toggleCredential = (e) => {\r\n        setProcessTitle(\"Sending user credentials\")\r\n        setIsProcessing(true)\r\n\r\n        API.post('send-credentials', {\r\n            id: [props.selectedProfile.profile_id]\r\n        }, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed',\r\n                \"Technical Error\",\r\n                'error'\r\n            )\r\n        })\r\n    }\r\n\r\n    const toggleRef = (e) => {\r\n        setProcessTitle(\"Sending reference number\")\r\n        setIsProcessing(true)\r\n        \r\n        API.post('send-sms', {\r\n            id: [props.selectedProfile.profile_id]\r\n        }, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed',\r\n                \"Technical Error\",\r\n                'error'\r\n            )\r\n        })\r\n    }\r\n\r\n    const toggleQR = (e) => {\r\n        setProcessTitle(\"Sending QR code\")\r\n        setIsProcessing(true)\r\n\r\n        API.post('send-email', {\r\n            id: [props.selectedProfile.profile_id]\r\n        }, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed',\r\n                \"Technical Error\",\r\n                'error'\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={\"static\"} isOpen={props.isOpen} toggle={props.toggle} className=\"modal-lg\" style={{ marginLeft: props.modalMargin, marginTop: \"5%\" }}>\r\n                <ModalHeader>\r\n                    <FontAwesomeIcon icon={faEnvelope} className=\"mr-1\" />\r\n                    Send Information <br />\r\n                    <small className=\"text-info\">\r\n                        <FontAwesomeIcon icon={faInfoCircle} className=\"mr-1\" />\r\n                        Note: Please make sure that the participant has a mobile number and an email\r\n                    </small>\r\n                </ModalHeader>\r\n                <ModalBody className=\"mt-0 pt-0\">\r\n                    <Row className=\"p-2 pt-0\">\r\n                        <Col md={12} className=\"text-center\">\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <Row className=\"m-0 p-0\">\r\n                                        <Col md={12} className=\"text-left m-0 p-0\">\r\n                                            <span><b><FontAwesomeIcon icon={faUser} className=\"mr-1\" />Participant:</b> {`${props.selectedProfile.profile.first_name.toUpperCase()} ${props.selectedProfile.profile.last_name.toUpperCase()}`}</span> <br />\r\n                                            <span><b><FontAwesomeIcon icon={faMobileAlt} className=\"mr-2\" />Mobile:</b> {`${props.selectedProfile.profile.mobile}`}</span>  <br />\r\n                                            <span><b><FontAwesomeIcon icon={faEnvelope} className=\"mr-1\" />Email:</b> {`${props.selectedProfile.profile.email || \"N/A\"}`}</span> <br />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className=\"mt-3\">\r\n                                        <Col md={4}>\r\n                                            <MUIButton disabled={isProcessing} color=\"primary\" onClick={(e) => toggleCredential(e)} variant=\"outlined\" fullWidth style={{ height: \"70px\" }}>\r\n                                                <FontAwesomeIcon icon={faKey} className=\"mr-1\" />\r\n                                                <span>Send User Credential</span>\r\n                                            </MUIButton>\r\n                                        </Col>\r\n                                        <Col md={4}>\r\n                                            <MUIButton disabled={isProcessing} color=\"primary\" onClick={(e) => toggleRef(e)} variant=\"outlined\" fullWidth style={{ height: \"70px\" }}>\r\n                                                <FontAwesomeIcon icon={faSms} size=\"lg\" className=\"mr-1\" color=\"success\" />\r\n                                                <span>Send Reference #</span>\r\n                                            </MUIButton>\r\n                                        </Col>\r\n                                        <Col md={4}>\r\n                                            <MUIButton disabled={isProcessing} color=\"primary\" onClick={(e) => toggleQR(e)} variant=\"outlined\" fullWidth style={{ height: \"70px\" }}>\r\n                                                <FontAwesomeIcon icon={faQrcode} size=\"lg\" className=\"mr-1\" />\r\n                                                <span>Send QR Code</span>\r\n                                            </MUIButton>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        {isProcessing &&\r\n                            <Col md={12}>\r\n                                <Paper className=\"p-2 m-2 mt-3\">\r\n                                    <LinearProgressBarWithLabel title={processTitle} />\r\n                                </Paper>\r\n                            </Col>\r\n                        }\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"danger\" onClick={props.toggle} disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                        <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SendInformation ","import React, { useState, useEffect, useRef } from 'react'\r\nimport QRcode from 'qrcode.react'\r\nimport HTML2Canvas from 'html2canvas'\r\nimport { useAuth } from \"../../../context/auth\"\r\nimport { useProfile } from \"../../../context/profile\"\r\nimport PRC from \"../../../assets/prc.png\"\r\nimport USTP from \"../../../assets/ustp.png\"\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faQrcode, faPrint, faDownload } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst QRCodeModal = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedProfile = useProfile().selectedProfile\r\n    const componentRef = useRef()\r\n    const [dataToEmbed, setDataToEmbed] = useState(\"\")\r\n    const [isToDisplay, setIsToDisplay] = useState(false)\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const generateQR = () => {\r\n        let dataFormat = `${selectedProfile.created_at}-${selectedProfile.profile.first_name}-${selectedProfile.profile.last_name}-${selectedProfile.profile_id}`\r\n        setDataToEmbed(dataFormat)\r\n        setIsProcessing(true)\r\n        setTimeout(() => {\r\n            setIsToDisplay(true)\r\n            setIsProcessing(false)\r\n        }, 1000)\r\n    }\r\n\r\n    const downloadQR = () => {\r\n        HTML2Canvas(document.getElementById('qrCode')).then(canvas => {\r\n            const pngUrl = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\")\r\n            let downloadLink = document.createElement(\"a\")\r\n            downloadLink.href = pngUrl\r\n            downloadLink.download = `${selectedProfile.profile.last_name}-QR.png`\r\n            document.body.appendChild(downloadLink)\r\n            downloadLink.click()\r\n            document.body.removeChild(downloadLink)\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        generateQR()\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={\"static\"} isOpen={props.isOpen} toggle={props.toggle} className=\"modal-lg\" style={{ marginTop: \"5%\" }}>\r\n                <ModalHeader>\r\n                    <FontAwesomeIcon icon={faQrcode} className=\"mr-1\" />\r\n                        QR Code\r\n                    </ModalHeader>\r\n                <ModalBody>\r\n                    <Row className=\"p-2 pt-0\">\r\n                        <Col md={{ size: \"8\", offset: \"2\" }} className=\"text-center\">\r\n                            {isToDisplay &&\r\n                                <div id=\"qrCode\">\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                            <QRcode\r\n                                                id=\"QRData\"\r\n                                                value={dataToEmbed}\r\n                                                size={290}\r\n                                                level={\"H\"}\r\n                                                includeMargin={false}\r\n                                                renderAs={\"canvas\"}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={12}>\r\n                                            <div className=\"ml-4 mr-4 p-2 text-center\" style={{ border: \"1px solid #ccc\" }}>\r\n                                                <Row>\r\n                                                    <Col md={2}>\r\n                                                        <img src={PRC} width=\"50\" height=\"50\" alt=\"PRC Logo\" />\r\n                                                    </Col>\r\n                                                    <Col md={8} className=\"text-center m-0\">\r\n                                                        <ul className=\"p-0 m-0 ml-2\" style={{ listStyle: \"none\", lineHeight: \"0.9rem\" }}>\r\n                                                            <li style={{ fontSize: \"1.7rem\", borderBottom: \"2px solid #000\" }}><h5 className=\"mb-0 pb-0\">{`${selectedProfile.profile.first_name} ${selectedProfile.profile.last_name}`}</h5></li>\r\n                                                            <li><small style={{ fontSize: \"0.9rem\", marginTop:\"5px\" }}>{`${selectedProfile.role.toUpperCase()}`}</small></li>\r\n                                                        </ul>\r\n                                                    </Col>\r\n                                                    <Col md={2}>\r\n                                                        <img src={USTP} width=\"50\" height=\"50\" alt=\"USTP Logo\" className=\"mt-1\" />\r\n\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </div>\r\n                                        </Col>\r\n                                        <Col md={12}>\r\n                                            <small style={{ fontSize: \"0.5rem\", marginTop: \"-10px\" }}>Generated by <b>USTP - EMS</b></small>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </div>\r\n                            }\r\n                        </Col>\r\n                        {isProcessing &&\r\n                            <Col md={12}>\r\n                                <Paper className=\"p-2 m-2 mt-3\">\r\n                                    <LinearProgressBarWithLabel title={`Generating QR Code for ${selectedProfile.profile.first_name}`} />\r\n                                </Paper>\r\n                            </Col>\r\n                        }\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter className=\"text-center\">\r\n                    <Button onClick={downloadQR} type=\"submit\" className=\"mr-1 btn\" color=\"primary\" disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                        <FontAwesomeIcon icon={faDownload} /> Download\r\n                    </Button>\r\n                    <Button color=\"danger\" className=\"btn\" onClick={props.toggle} disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                        <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QRCodeModal ","import React, { useState, useEffect } from 'react'\r\n\r\nimport { TextField, MenuItem, InputAdornment } from '@material-ui/core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUsers } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst RolesSelect = (props) => {\r\n\r\n    const [roles, setRoles] = useState(\"\")\r\n\r\n    const handleChange = (value) => {\r\n        setRoles(value)\r\n        props.roleChangeHandler(value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                select\r\n                name=\"rolesId\"\r\n                value={roles}\r\n                onChange={(e) => handleChange(e.target.value)}\r\n                fullWidth\r\n                required\r\n                InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <FontAwesomeIcon icon={faUsers} className=\"mr-1\" /> <b>Roles:</b>\r\n                        </InputAdornment>\r\n                    )\r\n                }}\r\n            >\r\n                {props.rolesList.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                    </MenuItem>\r\n                ))}\r\n            </TextField>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RolesSelect ","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { useAuth } from \"../../../context/auth\"\r\nimport { ProfileContext } from \"../../../context/profile\"\r\nimport API from '../../../Api'\r\n\r\nimport { Paper, Tooltip } from '@material-ui/core'\r\nimport { Button, Container, Col, Row } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCommentDots, faDoorOpen, faPaperPlane, faQrcode, faUserEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport DataTable from '../../UI/Datatable/Datatable'\r\nimport EventProfilesSelect from '../../UI/Forms/Fields/EventProfilesSelect'\r\nimport ProfileRecords from '../../UI/Modals/ProfileRecords'\r\nimport SendInformation from '../../UI/Modals/SendInformation'\r\nimport NewRemarks from '../../UI/Modals/NewRemarks'\r\nimport NewRoomAssignment from '../../UI/Modals/NewRoomAssignment'\r\nimport QRCodeModal from '../../UI/Modals/QRCodeModal'\r\nimport RolesSelect from '../../UI/Forms/Fields/RoleSelect'\r\n\r\nconst Main = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n\r\n    const [eventId, setEventId] = useState(\"\")\r\n    const [roleId, setRoleId] = useState(\"\")\r\n    const [rolesList, setRolesList] = useState([])\r\n    const [profileData, setProfileData] = useState([])\r\n    const [selectedProfile, setSelectedProfile] = useState({})\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const [isShowProfileRecordsModal, setIsShowProfileRecordsModal] = useState(false)\r\n    const toggleIsShowProfileRecordsModal = () => setIsShowProfileRecordsModal(!isShowProfileRecordsModal)\r\n\r\n    const [isShowSendInfoModal, setIsShowSendInfoModal] = useState(false)\r\n    const toggleIsShowSendInfoModal = () => setIsShowSendInfoModal(!isShowSendInfoModal)\r\n\r\n    const [isShowRemarksModal, setIsShowRemarksModal] = useState(false)\r\n    const toggleIsShowRemarksModal = () => setIsShowRemarksModal(!isShowRemarksModal)\r\n\r\n    const [isShowNewRoomAssignmentModal, setIsShowNewRoomAssignmentModal] = useState(false)\r\n    const toggleIsShowNewRoomAssignmentModal = () => setIsShowNewRoomAssignmentModal(!isShowNewRoomAssignmentModal)\r\n\r\n    const [isShowQRModal, setIsShowQRModal] = useState(false)\r\n    const toggleIsShowQRModal = () => setIsShowQRModal(!isShowQRModal)\r\n\r\n    const eventChangeHandler = (id) => {\r\n        setEventId(id)\r\n        getRoles(id)\r\n        loadProfiles(id)\r\n    }\r\n\r\n    const roleChangeHandler = (role) => {\r\n        setRoleId(role)\r\n        loadProfilesWithRoles(role, eventId)\r\n    }\r\n\r\n    const updateParticipantHandler = (value, index) => {\r\n        let data = value\r\n        data.rowIndex = index\r\n        setSelectedProfile(data)\r\n        toggleIsShowProfileRecordsModal()\r\n    }\r\n\r\n    const sendInformationHandler = (value) => {\r\n        setSelectedProfile(value)\r\n        toggleIsShowSendInfoModal()\r\n    }\r\n\r\n    const remarksHandler = (value) => {\r\n        setSelectedProfile(value)\r\n        toggleIsShowRemarksModal()\r\n    }\r\n\r\n    const assignRoomHandler = (value) => {\r\n        setSelectedProfile(value)\r\n        toggleIsShowNewRoomAssignmentModal()\r\n    }\r\n\r\n    const generateQRHandler = (value) => {\r\n        setSelectedProfile(value)\r\n        toggleIsShowQRModal()\r\n    }\r\n\r\n    const getRoles = (eventID) => {\r\n        API.get(`participants/return-roles/${eventID}`, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            let rolesList = formatRolesData(result)\r\n            setRolesList(rolesList)\r\n        })\r\n    }\r\n\r\n    const formatRolesData = (result) => {\r\n        if (result.data !== null) {\r\n            let rolesList = result.data.map((roles) => {\r\n                return {\r\n                    value: roles,\r\n                    label: roles\r\n                }\r\n            })\r\n\r\n            return [{ value: '', label: '' }, ...rolesList]\r\n        }\r\n    }\r\n\r\n    const loadProfiles = useCallback((evID) => {\r\n        setEventId(evID)\r\n        setIsLoading(true)\r\n        API.get(`participants/${evID}`, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            let profiles = formatData(result)\r\n            setProfileData(profiles)\r\n            setIsLoading(false)\r\n        }).catch(e => {\r\n            setIsLoading(false)\r\n        })\r\n    }, [])\r\n\r\n    const loadProfilesWithRoles = useCallback((role, eventID) => {\r\n\r\n        let data = {\r\n            \"event\": eventID,\r\n            \"role\": role\r\n        }\r\n\r\n        setIsLoading(true)\r\n\r\n        API.post(`participants/roles/profile`, data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            let profiles = formatData(result)\r\n            setProfileData(profiles)\r\n            setIsLoading(false)\r\n        }).catch(e => {\r\n            setIsLoading(false)\r\n        })\r\n    }, [])\r\n\r\n    const formatData = (result) => {\r\n        let data = result.data\r\n        if (data !== null && data.length > 0) {\r\n            return data.map((p) => {\r\n                let profile = p.profile\r\n                let address = p.profile.address || null\r\n                if (address != null) {\r\n                    if (address.specific_address != null) {\r\n                        address = `${address.specific_address}, ${address.barangay}, ${address.zipcodes.city}, ${address.zipcodes.province}`\r\n                    } else {\r\n                        address = `${address.zipcodes.city}, ${address.zipcodes.province}`\r\n                    }\r\n                } else {\r\n                    address = \"N/A\"\r\n                }\r\n\r\n                let rs = [\r\n                    profile.id,\r\n                    `${profile.first_name.toUpperCase()} ${profile.last_name.toUpperCase()}`,\r\n                    profile.mobile === null ? \"N/A\" : profile.mobile,\r\n                    profile.email === null ? \"N/A\" : profile.email,\r\n                    p,\r\n                ]\r\n\r\n                return rs\r\n            })\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        \"ID\",\r\n        \"Name\",\r\n        \"Contact\",\r\n        \"Email\",\r\n        {\r\n            name: \"Actions\",\r\n            options: {\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <div style={{ color: \"#1a1751\" }}>\r\n                            <Tooltip title=\"View Profile\" placement=\"top\">\r\n                                <Button color=\"link\" className=\"p-1 m-0 btn\" onClick={() => updateParticipantHandler(value, tableMeta.rowIndex)}>\r\n                                    <FontAwesomeIcon icon={faUserEdit} />\r\n                                </Button>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Send Information\" placement=\"top\" >\r\n                                <Button color=\"link\" className=\"p-1 m-0 btn\" onClick={() => sendInformationHandler(value)}>\r\n                                    <FontAwesomeIcon icon={faPaperPlane} />\r\n                                </Button>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Add Remarks\" placement=\"top\">\r\n                                <Button color=\"link\" className=\"p-1 m-0 btn\" onClick={() => remarksHandler(value)}>\r\n                                    <FontAwesomeIcon icon={faCommentDots} />\r\n                                </Button>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Assign Room\" placement=\"top\">\r\n                                <Button color=\"link\" className=\"p-1 m-0 btn\" onClick={() => assignRoomHandler(value)}>\r\n                                    <FontAwesomeIcon icon={faDoorOpen} />\r\n                                </Button>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Generate QRcode\" placement=\"top\">\r\n                                <Button color=\"link\" className=\"p-1 m-0 btn\" onClick={() => generateQRHandler(value)}>\r\n                                    <FontAwesomeIcon icon={faQrcode} />\r\n                                </Button>\r\n                            </Tooltip>\r\n                        </div >\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    ]\r\n\r\n    const options = {\r\n        filterType: 'dropdown',\r\n        tableBodyHeight: '420px',\r\n        responsive: \"standard\",\r\n        selectableRows: 'none',\r\n        print: false,\r\n        download: false,\r\n        textLabels: {\r\n            body: {\r\n                noMatch: \"Please select the records to be loaded\"\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ProfileContext.Provider value={{ selectedProfile }}>\r\n            <Container fluid className=\"mt-4 p-0 m-0\">\r\n                <Col md={{ size: \"5\", offset: \"2\" }} className=\"p-0 pr-1 pt-4 pl-0 m-0 mr-5 float-left\">\r\n                    <Paper className=\"pl-2 pb-2 pr-2 pt-1 m-0 mt-2 pull-left\">\r\n                        <EventProfilesSelect eventChangeHandler={eventChangeHandler} />\r\n                    </Paper>\r\n                </Col>\r\n                <Col md={{ size: \"3\", offset: \"2\" }} className=\"p-0 pr-1 pt-4 pl-0 m-0 mr-1 ml-5 float-right\">\r\n                    <Paper className=\"pl-2 pb-2 pr-2 pt-1 m-0 mt-2 pull-right\">\r\n                        <RolesSelect roleChangeHandler={roleChangeHandler} rolesList={rolesList} />\r\n                    </Paper>\r\n                </Col>\r\n                <Row className=\"float-left\" style={{ width: \"100%\"}}>\r\n                    <Col md={12} className=\"m-0 p-0 pr-2\">\r\n                        <DataTable title=\"Participants\" loadProfiles={loadProfiles} data={profileData} isLoading={isLoading} columns={columns} options={options} />\r\n                    </Col>\r\n                    {isShowProfileRecordsModal &&\r\n                        <ProfileRecords isOpen={isShowProfileRecordsModal} toggle={toggleIsShowProfileRecordsModal} modalMargin={props.modalMargin} />\r\n                    }\r\n\r\n                    {isShowSendInfoModal &&\r\n                        <SendInformation isOpen={isShowSendInfoModal} toggle={toggleIsShowSendInfoModal} selectedProfile={selectedProfile} />\r\n                    }\r\n\r\n                    {isShowRemarksModal &&\r\n                        <NewRemarks isOpen={isShowRemarksModal} toggle={toggleIsShowRemarksModal} loadRemarks={() => null} />\r\n                    }\r\n\r\n                    {isShowNewRoomAssignmentModal &&\r\n                        <NewRoomAssignment isOpen={isShowNewRoomAssignmentModal} toggle={toggleIsShowNewRoomAssignmentModal} loadAssignedRooms={() => null} />\r\n                    }\r\n\r\n                    {isShowQRModal &&\r\n                        <QRCodeModal isOpen={isShowQRModal} toggle={toggleIsShowQRModal} />\r\n                    }\r\n                </Row>\r\n            </Container>\r\n        </ProfileContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Main","import React from 'react';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\n\r\nconst Footer = (props) =>{\r\n    const dateFns = new DateFnsUtils();\r\n    const year = dateFns.format(new Date(), \"Y\");\r\n    return (\r\n        <div>\r\n            <footer className=\"m-0 p-0 ml-1\" style={{bottom: '0', left:'0', position: 'fixed'}}>\r\n                <small>Copyright &copy; {year}. All rights reserved.</small>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, { useState } from 'react'\r\nimport API from '../../../Api'\r\nimport Swal from 'sweetalert2'\r\nimport { useAuth } from \"../../../context/auth\"\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Card,\r\n    CardBody,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faKey, faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { TextField, InputAdornment, IconButton, Paper } from '@material-ui/core'\r\nimport Visibility from '@material-ui/icons/Visibility'\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst ChangePasswordModal = (props) => {\r\n    const authToken = useAuth().authTokens\r\n\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n    const [isShowNewPass, setIsShowNewPass] = useState(false)\r\n    const [isShowConfirmPass, setIsShowConfirmPass] = useState(false)\r\n    const [isShowOldPass, setIsShowOldPass] = useState(false)\r\n    const [isConfirmError, setIsConfirmError] = useState(false)\r\n    const [isMinimum, setIsMinimum] = useState(false)\r\n    const [newPassword, setNewPassword] = useState('')\r\n    const [oldPassword, setOldPassword] = useState('')\r\n\r\n    const toggleShowNewPassword = () => setIsShowNewPass(!isShowNewPass)\r\n    const toggleShowConfirmPassword = () => setIsShowConfirmPass(!isShowConfirmPass)\r\n    const toggleShowOldPassword = () => setIsShowOldPass(!isShowOldPass)\r\n\r\n    const changePasswordHandler = (e) => {\r\n        e.preventDefault()\r\n        const token = authToken.access_token\r\n\r\n\r\n        if (!isConfirmError && !isMinimum) {\r\n            setIsProcessing(true)\r\n\r\n            let newPassData = {\r\n                \"password\": oldPassword,\r\n                \"new_password\": newPassword\r\n            }\r\n\r\n\r\n            API.post('auth/carrier/update-password', newPassData, {\r\n                headers: {\r\n                    'Authorization': 'bearer ' + token,\r\n                }\r\n            }).then(result => {\r\n                setIsProcessing(false)\r\n                if (result.data.status) {\r\n                    Swal.fire(\r\n                        'Transaction Completed!',\r\n                        'Password Successfully Updated!',\r\n                        'success'\r\n                    )\r\n\r\n                    props.toggle()\r\n                } else {\r\n                    Swal.fire(\r\n                        'Transaction Failed!',\r\n                        result.data.message,\r\n                        'error'\r\n                    )\r\n                }\r\n            }).catch(e => {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    'Failed to Update Password!',\r\n                    'error'\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n    const checkConfirmPassword = (value) => {\r\n        if (value === newPassword) {\r\n            setIsConfirmError(false)\r\n        } else {\r\n            setIsConfirmError(true)\r\n        }\r\n    }\r\n\r\n    const handleChangePassword = (value) => {\r\n        setNewPassword(value)\r\n        if (value.length < 6) {\r\n            setIsMinimum(true)\r\n        } else {\r\n            setIsMinimum(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={\"static\"} isOpen={props.isOpen} toggle={props.toggle} className=\"modal-md\" style={{ marginTop: \"5%\", color: \"#1a1751\" }}>\r\n                <ModalHeader>\r\n                    <FontAwesomeIcon icon={faKey} /> Change Password <br />\r\n                    <small className=\"text-danger\">\r\n                        <FontAwesomeIcon icon={faInfoCircle} className=\"mr-1\" />\r\n                            Note: Fields with * is a required field\r\n                    </small>\r\n                </ModalHeader>\r\n                <form onSubmit={(e) => changePasswordHandler(e)}>\r\n                    <ModalBody>\r\n                        <Row className=\"p-2 pt-0\">\r\n                            <div className=\"col-md-12\">\r\n                                <Row>\r\n                                    <div className=\"col-md-12 p-1\">\r\n                                        <Card className=\"p-1\">\r\n                                            <CardBody className=\"p-1 m-1\">\r\n                                                <div className=\"mt-1 mb-1\">\r\n                                                    <TextField\r\n                                                        name=\"old_password\"\r\n                                                        label=\"Old Password\"\r\n                                                        type={isShowOldPass ? \"text\" : \"password\"}\r\n                                                        onChange={(e) => setOldPassword(e.target.value)}\r\n                                                        fullWidth\r\n                                                        required\r\n                                                        InputProps={{\r\n                                                            endAdornment: <InputAdornment position=\"end\">\r\n                                                                <IconButton onClick={toggleShowOldPassword}>\r\n                                                                    {isShowOldPass ? <Visibility /> : <VisibilityOff />}\r\n                                                                </IconButton>\r\n                                                            </InputAdornment>\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <TextField\r\n                                                        type={isShowNewPass ? \"text\" : \"password\"}\r\n                                                        name=\"new_password\"\r\n                                                        label=\"New Password\"\r\n                                                        onChange={(e) => handleChangePassword(e.target.value)}\r\n                                                        error={isMinimum}\r\n                                                        fullWidth\r\n                                                        required\r\n                                                        InputProps={{\r\n                                                            endAdornment: <InputAdornment position=\"end\">\r\n                                                                <IconButton onClick={toggleShowNewPassword}>\r\n                                                                    {isShowNewPass ? <Visibility /> : <VisibilityOff />}\r\n                                                                </IconButton>\r\n                                                            </InputAdornment>\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"mt-1 mb-1\">\r\n                                                    <TextField\r\n                                                        error={isConfirmError}\r\n                                                        type={isShowConfirmPass ? \"text\" : \"password\"}\r\n                                                        name=\"confirm_password\"\r\n                                                        label=\"Confirm Password\"\r\n                                                        onChange={(e) => checkConfirmPassword(e.target.value)}\r\n                                                        fullWidth\r\n                                                        required\r\n                                                        InputProps={{\r\n                                                            endAdornment: <InputAdornment position=\"end\">\r\n                                                                <IconButton onClick={toggleShowConfirmPassword}>\r\n                                                                    {isShowConfirmPass ? <Visibility /> : <VisibilityOff />}\r\n                                                                </IconButton>\r\n                                                            </InputAdornment>\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                            </CardBody>\r\n                                        </Card>\r\n                                    </div>\r\n                                </Row>\r\n                            </div>\r\n                            {isProcessing &&\r\n                                <Col md={12}>\r\n                                    <Paper className=\"p-2 m-2 mt-3\">\r\n                                        <LinearProgressBarWithLabel title=\"Updating Password\" />\r\n                                    </Paper>\r\n                                </Col>\r\n                            }\r\n                        </Row>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" color=\"primary\" disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faSave} /> Save\r\n                                </Button>{' '}\r\n                        <Button color=\"danger\" onClick={props.toggle} disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default ChangePasswordModal ","import { createContext, useContext } from 'react' \r\n\r\nexport const EventContext = createContext() \r\n\r\nexport function useEvent() {\r\n  return useContext(EventContext) \r\n}","import React, { useState } from 'react'\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport { useEvent } from '../../../../context/event'\r\n\r\nconst StartDate = (props) => {\r\n    const selectedEvent = useEvent().selectedEvent\r\n    const [startDate, setStartDate] = useState(selectedEvent.start || null)\r\n\r\n    const changeHandler = (date) => {\r\n        setStartDate(date)\r\n        if(props.startDateChangeHandler !== null){\r\n            props.startDateChangeHandler(date)\r\n        }        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                    value={startDate}\r\n                    onChange={(date, value) => changeHandler(date)}\r\n                    name=\"start\"\r\n                    label=\"Start Date\"\r\n                    format=\"MMM/d/yyyy\"\r\n                    disablePast\r\n                    required\r\n                    clearable\r\n                    hideTabs\r\n                    showTodayButton\r\n                    fullWidth\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StartDate ","import React, { useState } from 'react'\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport { useEvent } from '../../../../context/event'\r\n\r\nconst EndDate = (props) => {\r\n    const selectedEvent = useEvent().selectedEvent\r\n    const [endDate, setEndDate] = useState(selectedEvent.end || null)\r\n\r\n    return (\r\n        <div>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                    value={endDate}\r\n                    onChange={(date, value) => setEndDate(date)}\r\n                    name=\"end\"\r\n                    label=\"End Date\"\r\n                    format=\"MMM/d/yyyy\"\r\n                    disabled={props.isStartSelected}\r\n                    minDate={props.minDate}\r\n                    required\r\n                    clearable\r\n                    hideTabs\r\n                    fullWidth\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EndDate ","import React, { useState } from 'react'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\n\r\nimport { useEvent } from '../../../context/event'\r\n\r\nimport { TextField } from '@material-ui/core'\r\nimport { Container, Row, Col } from 'reactstrap'\r\n\r\nimport StartDate from './Fields/StartDate'\r\nimport EndDate from './Fields/EndDate'\r\n\r\n\r\nconst EventForm = (props) => {\r\n\r\n    const selectedEvent = useEvent().selectedEvent\r\n    const dateFns = new DateFnsUtils()\r\n\r\n    const [eventName, setEventName] = useState(selectedEvent.name || \"\")\r\n    const [location, setLocation] = useState(selectedEvent.location || \"\")\r\n    const [minDate, setMinDate] = useState(selectedEvent.start || null)\r\n    const [isStartSelected, setIsStartSelected] = useState(true)\r\n\r\n    const startDateChangeHandler = (value) => {\r\n        if (value !== \"\") {\r\n            setMinDate(dateFns.addDays(new Date(value), 1))\r\n            setIsStartSelected(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row className=\"m-0 p-0\">\r\n                <Col md={6}>\r\n                    <TextField\r\n                        value={eventName}\r\n                        onChange={(e) => setEventName(e.target.value)}\r\n                        name=\"eventname\"\r\n                        label=\"Event Name\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n                <Col md={6}>\r\n                    <TextField\r\n                        value={location}\r\n                        onChange={(e) => setLocation(e.target.value)}\r\n                        name=\"location\"\r\n                        label=\"Event Location\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"m-0 p-0 mt-2\">\r\n                <Col md={6}>\r\n                    <StartDate startDateChangeHandler={startDateChangeHandler} />\r\n                </Col>\r\n                <Col md={6}>\r\n                    <EndDate isStartSelected={isStartSelected} minDate={minDate} />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default EventForm\r\n","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\n\r\nimport API from '../../../Api'\r\nimport { useAuth } from \"../../../context/auth\"\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faCalendarPlus, faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport EventForm from '../Forms/EventForm'\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst NewEvent = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const dateFns = new DateFnsUtils()\r\n\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveDataHandler = (e) => {\r\n        e.preventDefault()\r\n        setIsProcessing(true)\r\n\r\n        let startDate = document.querySelector(\"input[name=start]\").value\r\n        let endDate = document.querySelector(\"input[name=end]\").value\r\n\r\n        let data = {\r\n            \"name\": document.querySelector(\"input[name=eventname]\").value,\r\n            \"dates\": [dateFns.format(new Date(startDate), \"Y-M-dd 00:00:00\"), dateFns.format(new Date(endDate), \"Y-M-dd 23:59:59\")],\r\n            'location': document.querySelector(\"input[name=location]\").value\r\n        }\r\n\r\n        API.post('events/store', data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n                props.loadEvents()\r\n                props.toggle()\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={\"static\"} isOpen={props.isOpen} toggle={props.toggle} className=\"modal-lg\" style={{ marginLeft: props.modalMargin, marginTop: \"5%\" }}>\r\n                <form onSubmit={(e) => saveDataHandler(e)}>\r\n                    <ModalHeader>\r\n                        <FontAwesomeIcon icon={faCalendarPlus} className=\"mr-1\" />\r\n                        New Event <br />\r\n                        <small className=\"text-danger\">\r\n                            <FontAwesomeIcon icon={faInfoCircle} className=\"mr-1\" />\r\n                            Note: Fields with * is a required field\r\n                        </small>\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <Row className=\"p-2 pt-0\">\r\n                            <Col md={12}>\r\n                                <EventForm />\r\n                            </Col>\r\n                            {isProcessing &&\r\n                                <Col md={12}>\r\n                                    <Paper className=\"p-2 m-2 mt-3\">\r\n                                        <LinearProgressBarWithLabel title=\"Creating new record\" />\r\n                                    </Paper>\r\n                                </Col>\r\n                            }\r\n                        </Row>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" className=\"mr-1\" color=\"primary\" disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faSave} /> Save\r\n                        </Button>\r\n                        <Button color=\"danger\" onClick={props.toggle} disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewEvent ","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\n\r\nimport API from '../../../Api'\r\nimport { useAuth } from \"../../../context/auth\"\r\nimport { useEvent } from \"../../../context/event\"\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faCalendarDay, faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport EventForm from '../Forms/EventForm'\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst UpdateProfileForm = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedEvent = useEvent().selectedEvent\r\n    const dateFns = new DateFnsUtils()\r\n\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const updateDataHandler = (e) => {\r\n        e.preventDefault()\r\n        setIsProcessing(true)\r\n\r\n        let startDate = document.querySelector(\"input[name=start]\").value\r\n        let endDate = document.querySelector(\"input[name=end]\").value\r\n\r\n        let data = {\r\n            \"id\": selectedEvent.id,\r\n            \"name\": document.querySelector(\"input[name=eventname]\").value,\r\n            \"dates\": [dateFns.format(new Date(startDate), \"Y-M-dd 00:00:00\"), dateFns.format(new Date(endDate), \"Y-M-dd 23:59:59\")],\r\n            'location': document.querySelector(\"input[name=location]\").value\r\n        }\r\n\r\n        API.post('events/update', data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n                props.loadEvents()\r\n                props.toggle()\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={\"static\"} isOpen={props.isOpen} toggle={props.toggle} className=\"modal-lg\" style={{ marginLeft: props.modalMargin, marginTop: \"5%\" }}>\r\n                <form onSubmit={(e) => updateDataHandler(e)}>\r\n                    <ModalHeader>\r\n                        <FontAwesomeIcon icon={faCalendarDay} className=\"mr-1\" />\r\n                        Update Event Record <br />\r\n                        <small className=\"text-danger\">\r\n                            <FontAwesomeIcon icon={faInfoCircle} className=\"mr-1\" />\r\n                            Note: Fields with * is a required field\r\n                        </small>\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <Row className=\"p-2 pt-0\">\r\n                            <Col md={12}>\r\n                                <EventForm />\r\n                            </Col>\r\n                            {isProcessing &&\r\n                                <Col md={12}>\r\n                                    <Paper className=\"p-2 m-2 mt-3\">\r\n                                        <LinearProgressBarWithLabel title=\"Updating record\" />\r\n                                    </Paper>\r\n                                </Col>\r\n                            }\r\n                        </Row>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" className=\"mr-1\" color=\"primary\" disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faSave} /> Save\r\n                        </Button>\r\n                        <Button color=\"danger\" onClick={props.toggle} disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdateProfileForm ","import React, { useState, useEffect, useCallback } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\n\r\nimport { useAuth } from \"../../../context/auth\"\r\nimport { EventContext } from \"../../../context/event\"\r\nimport API from '../../../Api'\r\n\r\nimport { Tooltip } from '@material-ui/core'\r\nimport MUIButton from '@material-ui/core/Button'\r\nimport { Container, Button, Row } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArchive, faCalendarDay, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport DataTable from '../../UI/Datatable/Datatable'\r\nimport NewEventModal from '../../UI/Modals/NewEvent'\r\nimport UpdateEventModal from '../../UI/Modals/UpdateEvent'\r\n\r\nconst Events = (props) => {\r\n    const token = useAuth().authTokens\r\n    const dateFns = new DateFnsUtils()\r\n    const [selectedEvent, setSelectedEvent] = useState(null)\r\n    const [eventData, setEventData] = useState([])\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const [isShowNewEventModal, setIsShowNewEventModal] = useState(false)\r\n    const toggleIsShowNewEventModal = () => setIsShowNewEventModal(!isShowNewEventModal)\r\n\r\n    const [isShowUpdateEventModal, setIsShowUpdateEventModal] = useState(false)\r\n    const toggleIsShowUpdateEventModal = () => setIsShowUpdateEventModal(!isShowUpdateEventModal)\r\n\r\n    const newEventHandler = () => {\r\n        setSelectedEvent({\r\n            \"start\": null,\r\n            \"end\": null\r\n        })\r\n        toggleIsShowNewEventModal()\r\n    }\r\n\r\n    const updateEventHandler = (data) => {\r\n        setSelectedEvent(data)\r\n        toggleIsShowUpdateEventModal()\r\n    }\r\n\r\n    const archiveEventHandler = (data) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be able to revert this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes'\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                API.delete(`events/delete/${data.id}`, {\r\n                    headers: {\r\n                        'Authorization': 'bearer ' + token.access_token\r\n                    }\r\n                }).then(result => {\r\n                    if (result.data.status) {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'success'\r\n                        )\r\n                        loadEvents()\r\n                    } else {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'error'\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    const formatData = (result) => {\r\n        if (result.data != null && result.data.length >= 1) {\r\n            return result.data.map((event) => {\r\n                let ev = [\r\n                    event.id,\r\n                    event.name,\r\n                    dateFns.format(new Date(event.start), \"MMMM dd, Y\"),\r\n                    dateFns.format(new Date(event.end), \"MMMM dd, Y\"),\r\n                    event.location || \"N/A\",\r\n                    {\r\n                        \"id\": event.id,\r\n                        \"name\": event.name,\r\n                        \"start\": event.start,\r\n                        \"end\": event.end,\r\n                        \"location\": event.location || \"N/A\"\r\n                    }\r\n                ]\r\n\r\n                return ev\r\n            })\r\n        }\r\n    }\r\n\r\n    const loadEvents = useCallback(() => {\r\n        setIsLoading(true)\r\n        API.get('events', {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n\r\n            let eventsList = formatData(result)\r\n            setEventData(eventsList)\r\n            setIsLoading(false)\r\n\r\n        }).catch(e => {\r\n            setIsLoading(false)\r\n        })\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        loadEvents()\r\n    }, [loadEvents, token.access_token])\r\n\r\n\r\n    const columns = [\r\n        \"ID\",\r\n        \"Name\",\r\n        \"Start Date\",\r\n        \"End Date\",\r\n        \"Location\",\r\n        {\r\n            name: \"Actions\",\r\n            options: {\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <div style={{ color: \"#1a1751\" }}>\r\n                            <Tooltip title=\"Update Event Details\" placement=\"top\">\r\n                                <Button color=\"link\" className=\"p-1 m-0 btn\" onClick={() => updateEventHandler(value)}>\r\n                                    <FontAwesomeIcon icon={faEdit} />\r\n                                </Button>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Archive Event\" placement=\"top\">\r\n                                <Button color=\"link\" className=\"p-1 m-0 btn text-danger\" onClick={() => archiveEventHandler(value)}>\r\n                                    <FontAwesomeIcon icon={faArchive} />\r\n                                </Button>\r\n                            </Tooltip>\r\n                        </div >\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    ]\r\n\r\n    const options = {\r\n        fixHeader: true,\r\n        filterType: 'dropdown',\r\n        responsive: 'vertical',\r\n        tableBodyHeight: '450px',\r\n        selectableRows: 'none',\r\n        print: false,\r\n        download: false,\r\n    }\r\n\r\n    return (\r\n        <EventContext.Provider value={{ selectedEvent }}>\r\n            <Container fluid=\"true\" className=\"mt-4 p-0 m-0\">\r\n                <Row className=\"m-0 p-0\">\r\n                    <MUIButton onClick={newEventHandler} className=\"mt-4\" variant=\"contained\" color=\"primary\">\r\n                        <FontAwesomeIcon icon={faCalendarDay} className=\"mr-1\" />\r\n                        New Event\r\n                    </MUIButton>\r\n                </Row>\r\n                <Row>\r\n                    <DataTable title=\"Events\" loadEvents={loadEvents} data={eventData} isLoading={isLoading} columns={columns} options={options} />\r\n                    <NewEventModal isOpen={isShowNewEventModal} toggle={toggleIsShowNewEventModal} loadEvents={loadEvents} />\r\n                    <UpdateEventModal isOpen={isShowUpdateEventModal} toggle={toggleIsShowUpdateEventModal} loadEvents={loadEvents} />\r\n                </Row>\r\n            </Container>\r\n        </EventContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Events","import { createContext, useContext } from 'react' \r\n\r\nexport const RoomContext = createContext() \r\n\r\nexport function useRoom() {\r\n  return useContext(RoomContext) \r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useRoom } from '../../../context/room'\r\n\r\nimport { TextField } from '@material-ui/core'\r\nimport { Container, Row, Col } from 'reactstrap'\r\n\r\nconst RoomForm = (props) => {\r\n\r\n    const selectedRoom = useRoom().selectedRoom\r\n    const [roomName, setRoomName] = useState(\"\")\r\n    const [address, setAddress] = useState(\"\")\r\n    const [capacity, setCapacity] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        if (selectedRoom !== null) {\r\n            setRoomName(selectedRoom.name)\r\n            setAddress(selectedRoom.address)\r\n            setCapacity(selectedRoom.capacity)\r\n        }\r\n    }, [selectedRoom])\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row className=\"m-0 p-0\">\r\n                <Col md={6}>\r\n                    <TextField\r\n                        value={roomName}\r\n                        onChange={(e) => setRoomName(e.target.value)}\r\n                        name=\"roomName\"\r\n                        label=\"Room Name\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n                <Col md={6}>\r\n                    <TextField\r\n                        type=\"number\"\r\n                        value={capacity}\r\n                        onChange={(e) => setCapacity(e.target.value)}\r\n                        name=\"capacity\"\r\n                        label=\"Room Capacity\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"m-0 p-0 mt-2\">               \r\n                <Col md={6}>\r\n                    <TextField\r\n                        value={address}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                        name=\"address\"\r\n                        label=\"Room Location\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default RoomForm\r\n","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport API from '../../../Api'\r\nimport { useAuth } from \"../../../context/auth\"\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faDoorOpen, faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport RoomForm from '../Forms/RoomForm'\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst NewRoom = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const saveDataHandler = (e) => {\r\n        e.preventDefault()\r\n        setIsProcessing(true)\r\n\r\n        let data = {\r\n            \"name\": document.querySelector(\"input[name=roomName]\").value,\r\n            \"capacity\": document.querySelector(\"input[name=capacity]\").value,\r\n            'address': document.querySelector(\"input[name=address]\").value\r\n        }\r\n\r\n        API.post('rooms/store', data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n                props.loadRooms()\r\n                props.toggle()\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={\"static\"} isOpen={props.isOpen} toggle={props.toggle} className=\"modal-lg\" style={{ marginLeft: props.modalMargin, marginTop: \"5%\" }}>\r\n                <form onSubmit={(e) => saveDataHandler(e)}>\r\n                    <ModalHeader>\r\n                        <FontAwesomeIcon icon={faDoorOpen} className=\"mr-1\" />\r\n                        New Room <br />\r\n                        <small className=\"text-danger\">\r\n                            <FontAwesomeIcon icon={faInfoCircle} className=\"mr-1\" />\r\n                            Note: Fields with * is a required field\r\n                        </small>\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <Row className=\"p-2 pt-0\">\r\n                            <Col md={12}>\r\n                                <RoomForm />\r\n                            </Col>\r\n                            {isProcessing &&\r\n                                <Col md={12}>\r\n                                    <Paper className=\"p-2 m-2 mt-3\">\r\n                                        <LinearProgressBarWithLabel title=\"Creating new room\" />\r\n                                    </Paper>\r\n                                </Col>\r\n                            }\r\n                        </Row>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" className=\"mr-1\" color=\"primary\" disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faSave} /> Save\r\n                        </Button>\r\n                        <Button color=\"danger\" onClick={props.toggle} disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewRoom ","import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport API from '../../../Api'\r\nimport { useAuth } from \"../../../context/auth\"\r\nimport { useRoom } from \"../../../context/room\"\r\n\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Row,\r\n    Col\r\n} from 'reactstrap'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faSave, faCalendarDay, faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport RoomForm from '../Forms/RoomForm'\r\nimport LinearProgressBarWithLabel from '../Common/LinearProgressBarWithLabel'\r\n\r\nconst UpdateProfileForm = (props) => {\r\n\r\n    const token = useAuth().authTokens\r\n    const selectedRoom = useRoom().selectedRoom\r\n\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const updateDataHandler = (e) => {\r\n        e.preventDefault()\r\n        setIsProcessing(true)\r\n\r\n        let data = {\r\n            \"name\": document.querySelector(\"input[name=roomName]\").value,\r\n            \"capacity\": selectedRoom.capacity,\r\n            'address': document.querySelector(\"input[name=address]\").value\r\n        }\r\n\r\n\r\n        API.put(`rooms/info-room/${selectedRoom.id}`, data, {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n            if (result.data.status) {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Completed!',\r\n                    result.data.message,\r\n                    'success'\r\n                )\r\n                props.loadRooms()\r\n                props.toggle()\r\n            } else {\r\n                setIsProcessing(false)\r\n                Swal.fire(\r\n                    'Transaction Failed!',\r\n                    result.data.message,\r\n                    'error'\r\n                )\r\n            }\r\n        }).catch(e => {\r\n            setIsProcessing(false)\r\n            Swal.fire(\r\n                'Transaction Failed!',\r\n                'Technical Error',\r\n                'error'\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal backdrop={\"static\"} isOpen={props.isOpen} toggle={props.toggle} className=\"modal-lg\" style={{ marginLeft: props.modalMargin, marginTop: \"5%\" }}>\r\n                <form onSubmit={(e) => updateDataHandler(e)}>\r\n                    <ModalHeader>\r\n                        <FontAwesomeIcon icon={faCalendarDay} className=\"mr-1\" />\r\n                        Update Event Record <br />\r\n                        <small className=\"text-danger\">\r\n                            <FontAwesomeIcon icon={faInfoCircle} className=\"mr-1\" />\r\n                            Note: Fields with * is a required field\r\n                        </small>\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <Row className=\"p-2 pt-0\">\r\n                            <Col md={12}>\r\n                                <RoomForm />\r\n                            </Col>\r\n                            {isProcessing &&\r\n                                <Col md={12}>\r\n                                    <Paper className=\"p-2 m-2 mt-3\">\r\n                                        <LinearProgressBarWithLabel title=\"Updating record\" />\r\n                                    </Paper>\r\n                                </Col>\r\n                            }\r\n                        </Row>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" className=\"mr-1\" color=\"primary\" disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faSave} /> Save\r\n                        </Button>\r\n                        <Button color=\"danger\" onClick={props.toggle} disabled={isProcessing} style={{ minWidth: \"120px\" }}>\r\n                            <FontAwesomeIcon icon={faWindowClose} /> Close\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdateProfileForm ","import React, { useState, useEffect, useCallback } from 'react'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport { useAuth } from '../../../context/auth'\r\nimport { RoomContext } from '../../../context/room'\r\nimport API from '../../../Api'\r\n\r\nimport { Tooltip } from '@material-ui/core'\r\nimport MUIButton from '@material-ui/core/Button'\r\nimport { Container, Button, Row } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArchive, faDoorOpen, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport DataTable from '../../UI/Datatable/Datatable'\r\nimport NewRoomModal from '../../UI/Modals/NewRoom'\r\nimport UpdateRoomModal from '../../UI/Modals/UpdateRoom'\r\n\r\nconst Rooms = (props) => {\r\n    const token = useAuth().authTokens\r\n\r\n    const [roomData, setRoomData] = useState([])\r\n    const [selectedRoom, setSelectedRoom] = useState(null)\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const [isShowNewRoomModal, setIsShowNewRoomModal] = useState(false)\r\n    const toggleIsShowNewRoomModal = () => setIsShowNewRoomModal(!isShowNewRoomModal)\r\n\r\n    const [isShowUpdateRoomModal, setIsShowUpdateRoomModal] = useState(false)\r\n    const toggleIsShowUpdateRoomModal = () => setIsShowUpdateRoomModal(!isShowUpdateRoomModal)\r\n\r\n    const newRoomHandler = () => {\r\n        setSelectedRoom(null)\r\n        toggleIsShowNewRoomModal()\r\n    }\r\n\r\n    const updateRoomHandler = (data) => {\r\n        setSelectedRoom(data)\r\n        toggleIsShowUpdateRoomModal()\r\n    }\r\n\r\n    const archiveEventHandler = (data) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be able to revert this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes'\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                API.delete(`rooms/delete/${data.id}`, {\r\n                    headers: {\r\n                        'Authorization': 'bearer ' + token.access_token\r\n                    }\r\n                }).then(result => {\r\n                    if (result.data.status) {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'success'\r\n                        )\r\n                        loadRooms()\r\n                    } else {\r\n                        Swal.fire(\r\n                            'Transaction Completed',\r\n                            result.data.message,\r\n                            'error'\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    const formatData = (result) => {\r\n        if (result.data != null && result.data.length >= 1) {\r\n            return result.data.map((room) => {\r\n                let rm = [\r\n                    room.id,\r\n                    room.name,\r\n                    room.capacity,\r\n                    room.address || \"N/A\",\r\n                    {\r\n                        \"id\": room.id,\r\n                        \"name\": room.name,\r\n                        \"capacity\": room.capacity,\r\n                        \"address\": room.address || \"N/A\"\r\n                    }\r\n                ]\r\n\r\n                return rm\r\n            })\r\n        }\r\n    }\r\n\r\n    const loadRooms = useCallback(() => {\r\n        setIsLoading(true)\r\n        API.get('rooms', {\r\n            headers: {\r\n                'Authorization': 'bearer ' + token.access_token\r\n            }\r\n        }).then(result => {\r\n\r\n            let roomsList = formatData(result)\r\n            setRoomData(roomsList)\r\n            setIsLoading(false)\r\n\r\n        }).catch(e => {\r\n            setIsLoading(false)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        loadRooms()\r\n    }, [loadRooms, token.access_token])\r\n\r\n    const columns = [\r\n        \"ID\",\r\n        \"Name\",\r\n        \"Capacity\",\r\n        \"Address\",\r\n        {\r\n            name: \"Actions\",\r\n            options: {\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <div style={{ color: \"#1a1751\" }}>\r\n                            <Tooltip title=\"Update Room Details\" placement=\"top\">\r\n                                <Button color=\"link\" className=\"p-1 m-0 btn\" onClick={() => updateRoomHandler(value)}>\r\n                                    <FontAwesomeIcon icon={faEdit} />\r\n                                </Button>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Archive Room\" placement=\"top\">\r\n                                <Button color=\"link\" className=\"p-1 m-0 btn text-danger\" onClick={() => archiveEventHandler(value)}>\r\n                                    <FontAwesomeIcon icon={faArchive} />\r\n                                </Button>\r\n                            </Tooltip>\r\n                        </div >\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    ]\r\n\r\n    const options = {\r\n        fixHeader: true,\r\n        filterType: 'dropdown',\r\n        responsive: 'vertical',\r\n        tableBodyHeight: '450px',\r\n        selectableRows: 'none',\r\n        print: false,\r\n        download: false,\r\n    }\r\n\r\n\r\n    return (\r\n        <RoomContext.Provider value={{ selectedRoom }}>\r\n            <Container fluid=\"true\" className=\"mt-4 p-0 m-0\">\r\n                <Row className=\"m-0 p-0\">\r\n                    <MUIButton onClick={newRoomHandler} className=\"mt-4\" variant=\"contained\" color=\"primary\">\r\n                        <FontAwesomeIcon icon={faDoorOpen} className=\"mr-1\" />\r\n                        New Room\r\n                    </MUIButton>\r\n                </Row>\r\n                <Row>\r\n                    <DataTable title=\"Rooms\" loadRooms={loadRooms} data={roomData} isLoading={isLoading} columns={columns} options={options} />\r\n                    <NewRoomModal isOpen={isShowNewRoomModal} toggle={toggleIsShowNewRoomModal} loadRooms={loadRooms} />\r\n                    <UpdateRoomModal isOpen={isShowUpdateRoomModal} toggle={toggleIsShowUpdateRoomModal} loadRooms={loadRooms} />\r\n                </Row>\r\n            </Container>\r\n        </RoomContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Rooms","import React, { useState } from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport { useAuth } from '../../context/auth'\r\nimport Icon from '../../assets/icon.png'\r\nimport APK from '../../assets/apk/app.apk'\r\n\r\nimport Main from './Main/Main'\r\nimport Footer from './Footer/Footer'\r\nimport ChangePasswordModal from '../UI/Modals/ChangePassword'\r\nimport Events from './Events/Events'\r\nimport Rooms from './Rooms/Rooms'\r\n\r\nimport {\r\n    Drawer,\r\n    AppBar,\r\n    Toolbar,\r\n    List,\r\n    Typography,\r\n    IconButton,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Collapse\r\n} from '@material-ui/core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCalendarDay, faCog, faDoorOpen, faFileAlt, faQrcode } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle'\r\nimport HomeIcon from '@material-ui/icons/Home'\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess'\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox'\r\nimport AndroidIcon from '@material-ui/icons/Android'\r\n\r\nimport clsx from 'clsx'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst drawerWidth = 220\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        backgroundColor: '#F8B828'\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        // height: '170px',\r\n        alignItems: 'center',\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        // justifyContent: 'flex-end',\r\n        backgroundColor: \"#1a1751\",\r\n        color: \"#FFFFFF\",\r\n        margin: \"0px\",\r\n        padding: \"0px\"\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n    large: {\r\n        width: theme.spacing(10),\r\n        height: theme.spacing(10),\r\n    },\r\n    nested: {\r\n        paddingLeft: theme.spacing(4),\r\n    },\r\n}))\r\n\r\nexport default function Dashboard(props) {\r\n\r\n    const token = useAuth().authTokens\r\n    const classes = useStyles()\r\n    const [drawerStatus, setDrawerStatus] = useState(true)\r\n    const [isManageCollapse, setIsManageCollapse] = useState(false)\r\n    const [isGenerateCollapse, setIsGenerateCollapse] = useState(false)\r\n    const [modalMargin, setModalMargin] = useState(\"20%\")\r\n\r\n    const [changePasswordModal, setVisiblechangePasswordModal] = useState(false)\r\n    const toggleChangePasswordModal = () => setVisiblechangePasswordModal(!changePasswordModal)\r\n\r\n    const handleDrawer = () => {\r\n        setDrawerStatus(!drawerStatus)\r\n        if (!drawerStatus) {\r\n            setModalMargin(\"20%\")\r\n        } else {\r\n            setModalMargin(\"13%\")\r\n        }\r\n    }\r\n\r\n    const handleManageCollapse = () => {\r\n        setIsManageCollapse(!isManageCollapse)\r\n    }\r\n\r\n    const handleGenerateCollapse = () => {\r\n        setIsGenerateCollapse(!isGenerateCollapse)\r\n    }\r\n\r\n    const handleNavigation = (stringPath = \"/\") => {\r\n        switch (stringPath) {\r\n            case \"/\":\r\n                props.history.push(\"/\")\r\n                break\r\n            case \"events\":\r\n                props.history.push(\"/events\")\r\n                break\r\n            case \"rooms\":\r\n                props.history.push(\"/rooms\")\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    const downloadApk = (e) => {\r\n\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        sessionStorage.removeItem('prctokens')\r\n        window.location.reload()\r\n    }\r\n\r\n    const changePasswordHandler = (e) => {\r\n        e.preventDefault()\r\n        toggleChangePasswordModal()\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: drawerStatus,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawer}\r\n                        edge=\"start\"\r\n                        className={clsx(classes.menuButton)}\r\n                        style={{ color: \"#1a1751\", outline: \"none\" }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" style={{ color: \"#1a1751\" }} noWrap>\r\n                        <div className=\"float-left\">\r\n                            <img src={Icon} width=\"37\" height=\"40\" alt=\"EMS Logo\" />\r\n                        </div>\r\n                        <div className=\"float-left\">\r\n                            <ul className=\"p-0 m-0 mt-2 ml-1\" style={{ listStyle: \"none\", lineHeight: \"0.9rem\" }}>\r\n                                <li style={{ fontSize: \"1.5rem\" }}>EMS</li>\r\n                                <li><small style={{ fontSize: \"0.9rem\" }}>Event Monitoring System</small></li>\r\n                            </ul>\r\n                        </div>\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"persistent\"\r\n                anchor=\"left\"\r\n                open={drawerStatus}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.drawerHeader}>\r\n                    <div className=\"container-fluid text-left\" style={{ backgroundColor: \"#1a1751\", minHeight: \"50px\", height: \"50px\" }}>\r\n                        <div className=\"float-left mt-1\">\r\n                            <AccountCircleIcon style={{ width: \"45px\", height: \"45px\" }} />\r\n                        </div>\r\n                        <div className=\"float-left ml-2\">\r\n                            <ul className=\"m-0 p-0 mt-2\" style={{ listStyle: \"none\", lineHeight: \"1em\" }}>\r\n                                <li>{token.user}</li>\r\n                                <li><small>System Admin</small></li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <List style={{ display: 'flex', flexDirection: 'column' }}>\r\n                    <ListItem button onClick={() => handleNavigation(\"/\")}>\r\n                        <ListItemIcon><HomeIcon /></ListItemIcon>\r\n                        <ListItemText primary={\"Dashboard\"} />\r\n                    </ListItem>\r\n                    <ListItem button onClick={(e) => changePasswordHandler(e)}>\r\n                        <ListItemIcon><AccountBoxIcon /></ListItemIcon>\r\n                        <ListItemText primary={\"My Account\"} />\r\n                    </ListItem>\r\n                    <a href={APK} download=\"EMS.apk\" className=\"btn m-0 p-0\">\r\n                    <ListItem button>\r\n                        <ListItemIcon><AndroidIcon /></ListItemIcon>\r\n                        <ListItemText primary={\"Download APK\"}></ListItemText>\r\n                    </ListItem>\r\n                    </a>\r\n                    <ListItem button onClick={handleManageCollapse}>\r\n                        <ListItemIcon>\r\n                            <FontAwesomeIcon icon={faCog} size=\"lg\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Manage\" />\r\n                        {isManageCollapse ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n                    </ListItem>\r\n                    <Collapse in={isManageCollapse} timeout=\"auto\" unmountOnExit>\r\n                        <List component=\"div\" disablePadding>\r\n                            <ListItem button onClick={() => handleNavigation(\"events\")} className={classes.nested}>\r\n                                <ListItemIcon><FontAwesomeIcon icon={faCalendarDay} /></ListItemIcon>\r\n                                <ListItemText primary={\"Events\"} />\r\n                            </ListItem>\r\n                            <ListItem button onClick={() => handleNavigation(\"rooms\")} className={classes.nested}>\r\n                                <ListItemIcon><FontAwesomeIcon icon={faDoorOpen} /></ListItemIcon>\r\n                                <ListItemText primary={\"Rooms\"} />\r\n                            </ListItem>\r\n                        </List>\r\n                    </Collapse>\r\n                    <ListItem button onClick={handleGenerateCollapse}>\r\n                        <ListItemIcon>\r\n                            <FontAwesomeIcon icon={faFileAlt} size=\"lg\" className=\"ml-1\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Generate\" />\r\n                        {isGenerateCollapse ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n                    </ListItem>\r\n                    <Collapse in={isGenerateCollapse} timeout=\"auto\" unmountOnExit>\r\n                        <List component=\"div\" disablePadding>\r\n                            <ListItem button className={classes.nested}>\r\n                                <ListItemIcon><FontAwesomeIcon icon={faFileAlt} /></ListItemIcon>\r\n                                <ListItemText primary={\"Reports\"} />\r\n                            </ListItem>\r\n                            <ListItem button className={classes.nested}>\r\n                                <ListItemIcon><FontAwesomeIcon icon={faQrcode} /></ListItemIcon>\r\n                                <ListItemText primary={\"QR Code\"} />\r\n                            </ListItem>\r\n                        </List>\r\n                    </Collapse>\r\n                    <ListItem button onClick={() => handleLogout()}>\r\n                        <ListItemIcon><ExitToAppIcon /></ListItemIcon>\r\n                        <ListItemText primary={\"Logout\"} />\r\n                    </ListItem>\r\n                    <Footer />\r\n                </List>\r\n            </Drawer>\r\n            <main\r\n                className={clsx(classes.content, {\r\n                    [classes.contentShift]: drawerStatus,\r\n                })}\r\n            >\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <Main modalMargin={modalMargin} />\r\n                    </Route>\r\n                    <Route path=\"/events\">\r\n                        <Events />\r\n                    </Route>\r\n                    <Route path=\"/rooms\">\r\n                        <Rooms />\r\n                    </Route>\r\n                </Switch>\r\n\r\n                <ChangePasswordModal isOpen={changePasswordModal} toggle={toggleChangePasswordModal} />\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Error404 extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container card\" style={{marginTop: '10%' }}>\r\n                <div className=\"row h-100\">\r\n                    <div className=\"col-sm-12 text-center\">\r\n                        <h3 className=\"text-danger  p-1 m-4\"><b>Error 404: </b> Page Not Found</h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\r\n\r\nimport PrivateRoute from '../PrivateRoute'\r\nimport { AuthContext } from \"../context/auth\"\r\n\r\nimport './App.css'\r\n\r\nimport Login from '../components/Login/Login'\r\nimport Dashboard from '../components/Dashboard/Dashboard'\r\nimport Error404 from '../components/UI/Error/Error404'\r\n\r\n\r\nconst App = (props) => {\r\n  const existingTokens = JSON.parse(sessionStorage.getItem(\"prctokens\"))\r\n  const [authTokens, setAuthTokens] = useState(existingTokens)\r\n\r\n  const setTokens = (data) => {\r\n    sessionStorage.setItem(\"prctokens\", JSON.stringify(data))\r\n    setAuthTokens(data)\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authTokens, setAuthTokens: setTokens }}>\r\n      <Router basename=\"/prc/\">\r\n        <Switch>\r\n          <PrivateRoute exact path=\"/\" component={Dashboard} />\r\n          <PrivateRoute exact path=\"/users\" component={Dashboard} />\r\n          <PrivateRoute exact path=\"/events\" component={Dashboard} />\r\n          <PrivateRoute exact path=\"/rooms\" component={Dashboard} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route component={Error404} />\r\n        </Switch>\r\n      </Router>\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport default App ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}